
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Contract` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Contract
 * 
 */
export type ContractModel = runtime.Types.Result.DefaultSelection<Prisma.$ContractPayload>

export type AggregateContract = {
  _count: ContractCountAggregateOutputType | null
  _avg: ContractAvgAggregateOutputType | null
  _sum: ContractSumAggregateOutputType | null
  _min: ContractMinAggregateOutputType | null
  _max: ContractMaxAggregateOutputType | null
}

export type ContractAvgAggregateOutputType = {
  totalAmount: number | null
}

export type ContractSumAggregateOutputType = {
  totalAmount: number | null
}

export type ContractMinAggregateOutputType = {
  id: string | null
  jobId: string | null
  clientId: string | null
  providerId: string | null
  totalAmount: number | null
  currency: $Enums.Currency | null
  status: $Enums.PaymentStatus | null
  escrowId: string | null
  startDate: Date | null
  endDate: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ContractMaxAggregateOutputType = {
  id: string | null
  jobId: string | null
  clientId: string | null
  providerId: string | null
  totalAmount: number | null
  currency: $Enums.Currency | null
  status: $Enums.PaymentStatus | null
  escrowId: string | null
  startDate: Date | null
  endDate: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ContractCountAggregateOutputType = {
  id: number
  jobId: number
  clientId: number
  providerId: number
  totalAmount: number
  currency: number
  status: number
  escrowId: number
  startDate: number
  endDate: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ContractAvgAggregateInputType = {
  totalAmount?: true
}

export type ContractSumAggregateInputType = {
  totalAmount?: true
}

export type ContractMinAggregateInputType = {
  id?: true
  jobId?: true
  clientId?: true
  providerId?: true
  totalAmount?: true
  currency?: true
  status?: true
  escrowId?: true
  startDate?: true
  endDate?: true
  createdAt?: true
  updatedAt?: true
}

export type ContractMaxAggregateInputType = {
  id?: true
  jobId?: true
  clientId?: true
  providerId?: true
  totalAmount?: true
  currency?: true
  status?: true
  escrowId?: true
  startDate?: true
  endDate?: true
  createdAt?: true
  updatedAt?: true
}

export type ContractCountAggregateInputType = {
  id?: true
  jobId?: true
  clientId?: true
  providerId?: true
  totalAmount?: true
  currency?: true
  status?: true
  escrowId?: true
  startDate?: true
  endDate?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ContractAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Contract to aggregate.
   */
  where?: Prisma.ContractWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Contracts to fetch.
   */
  orderBy?: Prisma.ContractOrderByWithRelationInput | Prisma.ContractOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ContractWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Contracts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Contracts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Contracts
  **/
  _count?: true | ContractCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ContractAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ContractSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ContractMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ContractMaxAggregateInputType
}

export type GetContractAggregateType<T extends ContractAggregateArgs> = {
      [P in keyof T & keyof AggregateContract]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateContract[P]>
    : Prisma.GetScalarType<T[P], AggregateContract[P]>
}




export type ContractGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ContractWhereInput
  orderBy?: Prisma.ContractOrderByWithAggregationInput | Prisma.ContractOrderByWithAggregationInput[]
  by: Prisma.ContractScalarFieldEnum[] | Prisma.ContractScalarFieldEnum
  having?: Prisma.ContractScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ContractCountAggregateInputType | true
  _avg?: ContractAvgAggregateInputType
  _sum?: ContractSumAggregateInputType
  _min?: ContractMinAggregateInputType
  _max?: ContractMaxAggregateInputType
}

export type ContractGroupByOutputType = {
  id: string
  jobId: string
  clientId: string
  providerId: string
  totalAmount: number
  currency: $Enums.Currency
  status: $Enums.PaymentStatus
  escrowId: string | null
  startDate: Date | null
  endDate: Date | null
  createdAt: Date
  updatedAt: Date
  _count: ContractCountAggregateOutputType | null
  _avg: ContractAvgAggregateOutputType | null
  _sum: ContractSumAggregateOutputType | null
  _min: ContractMinAggregateOutputType | null
  _max: ContractMaxAggregateOutputType | null
}

type GetContractGroupByPayload<T extends ContractGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ContractGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ContractGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ContractGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ContractGroupByOutputType[P]>
      }
    >
  >



export type ContractWhereInput = {
  AND?: Prisma.ContractWhereInput | Prisma.ContractWhereInput[]
  OR?: Prisma.ContractWhereInput[]
  NOT?: Prisma.ContractWhereInput | Prisma.ContractWhereInput[]
  id?: Prisma.StringFilter<"Contract"> | string
  jobId?: Prisma.StringFilter<"Contract"> | string
  clientId?: Prisma.StringFilter<"Contract"> | string
  providerId?: Prisma.StringFilter<"Contract"> | string
  totalAmount?: Prisma.FloatFilter<"Contract"> | number
  currency?: Prisma.EnumCurrencyFilter<"Contract"> | $Enums.Currency
  status?: Prisma.EnumPaymentStatusFilter<"Contract"> | $Enums.PaymentStatus
  escrowId?: Prisma.StringNullableFilter<"Contract"> | string | null
  startDate?: Prisma.DateTimeNullableFilter<"Contract"> | Date | string | null
  endDate?: Prisma.DateTimeNullableFilter<"Contract"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"Contract"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Contract"> | Date | string
  job?: Prisma.XOR<Prisma.JobScalarRelationFilter, Prisma.JobWhereInput>
  client?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  provider?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  milestones?: Prisma.MilestoneListRelationFilter
  dispute?: Prisma.XOR<Prisma.DisputeNullableScalarRelationFilter, Prisma.DisputeWhereInput> | null
}

export type ContractOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  jobId?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  providerId?: Prisma.SortOrder
  totalAmount?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  status?: Prisma.SortOrder
  escrowId?: Prisma.SortOrderInput | Prisma.SortOrder
  startDate?: Prisma.SortOrderInput | Prisma.SortOrder
  endDate?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  job?: Prisma.JobOrderByWithRelationInput
  client?: Prisma.UserOrderByWithRelationInput
  provider?: Prisma.UserOrderByWithRelationInput
  milestones?: Prisma.MilestoneOrderByRelationAggregateInput
  dispute?: Prisma.DisputeOrderByWithRelationInput
}

export type ContractWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  jobId?: string
  AND?: Prisma.ContractWhereInput | Prisma.ContractWhereInput[]
  OR?: Prisma.ContractWhereInput[]
  NOT?: Prisma.ContractWhereInput | Prisma.ContractWhereInput[]
  clientId?: Prisma.StringFilter<"Contract"> | string
  providerId?: Prisma.StringFilter<"Contract"> | string
  totalAmount?: Prisma.FloatFilter<"Contract"> | number
  currency?: Prisma.EnumCurrencyFilter<"Contract"> | $Enums.Currency
  status?: Prisma.EnumPaymentStatusFilter<"Contract"> | $Enums.PaymentStatus
  escrowId?: Prisma.StringNullableFilter<"Contract"> | string | null
  startDate?: Prisma.DateTimeNullableFilter<"Contract"> | Date | string | null
  endDate?: Prisma.DateTimeNullableFilter<"Contract"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"Contract"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Contract"> | Date | string
  job?: Prisma.XOR<Prisma.JobScalarRelationFilter, Prisma.JobWhereInput>
  client?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  provider?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  milestones?: Prisma.MilestoneListRelationFilter
  dispute?: Prisma.XOR<Prisma.DisputeNullableScalarRelationFilter, Prisma.DisputeWhereInput> | null
}, "id" | "jobId">

export type ContractOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  jobId?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  providerId?: Prisma.SortOrder
  totalAmount?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  status?: Prisma.SortOrder
  escrowId?: Prisma.SortOrderInput | Prisma.SortOrder
  startDate?: Prisma.SortOrderInput | Prisma.SortOrder
  endDate?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ContractCountOrderByAggregateInput
  _avg?: Prisma.ContractAvgOrderByAggregateInput
  _max?: Prisma.ContractMaxOrderByAggregateInput
  _min?: Prisma.ContractMinOrderByAggregateInput
  _sum?: Prisma.ContractSumOrderByAggregateInput
}

export type ContractScalarWhereWithAggregatesInput = {
  AND?: Prisma.ContractScalarWhereWithAggregatesInput | Prisma.ContractScalarWhereWithAggregatesInput[]
  OR?: Prisma.ContractScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ContractScalarWhereWithAggregatesInput | Prisma.ContractScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Contract"> | string
  jobId?: Prisma.StringWithAggregatesFilter<"Contract"> | string
  clientId?: Prisma.StringWithAggregatesFilter<"Contract"> | string
  providerId?: Prisma.StringWithAggregatesFilter<"Contract"> | string
  totalAmount?: Prisma.FloatWithAggregatesFilter<"Contract"> | number
  currency?: Prisma.EnumCurrencyWithAggregatesFilter<"Contract"> | $Enums.Currency
  status?: Prisma.EnumPaymentStatusWithAggregatesFilter<"Contract"> | $Enums.PaymentStatus
  escrowId?: Prisma.StringNullableWithAggregatesFilter<"Contract"> | string | null
  startDate?: Prisma.DateTimeNullableWithAggregatesFilter<"Contract"> | Date | string | null
  endDate?: Prisma.DateTimeNullableWithAggregatesFilter<"Contract"> | Date | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Contract"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Contract"> | Date | string
}

export type ContractCreateInput = {
  id?: string
  totalAmount: number
  currency?: $Enums.Currency
  status?: $Enums.PaymentStatus
  escrowId?: string | null
  startDate?: Date | string | null
  endDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  job: Prisma.JobCreateNestedOneWithoutContractInput
  client: Prisma.UserCreateNestedOneWithoutContractsAsClientInput
  provider: Prisma.UserCreateNestedOneWithoutContractsAsProviderInput
  milestones?: Prisma.MilestoneCreateNestedManyWithoutContractInput
  dispute?: Prisma.DisputeCreateNestedOneWithoutContractInput
}

export type ContractUncheckedCreateInput = {
  id?: string
  jobId: string
  clientId: string
  providerId: string
  totalAmount: number
  currency?: $Enums.Currency
  status?: $Enums.PaymentStatus
  escrowId?: string | null
  startDate?: Date | string | null
  endDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  milestones?: Prisma.MilestoneUncheckedCreateNestedManyWithoutContractInput
  dispute?: Prisma.DisputeUncheckedCreateNestedOneWithoutContractInput
}

export type ContractUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  escrowId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  job?: Prisma.JobUpdateOneRequiredWithoutContractNestedInput
  client?: Prisma.UserUpdateOneRequiredWithoutContractsAsClientNestedInput
  provider?: Prisma.UserUpdateOneRequiredWithoutContractsAsProviderNestedInput
  milestones?: Prisma.MilestoneUpdateManyWithoutContractNestedInput
  dispute?: Prisma.DisputeUpdateOneWithoutContractNestedInput
}

export type ContractUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jobId?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  providerId?: Prisma.StringFieldUpdateOperationsInput | string
  totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  escrowId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  milestones?: Prisma.MilestoneUncheckedUpdateManyWithoutContractNestedInput
  dispute?: Prisma.DisputeUncheckedUpdateOneWithoutContractNestedInput
}

export type ContractCreateManyInput = {
  id?: string
  jobId: string
  clientId: string
  providerId: string
  totalAmount: number
  currency?: $Enums.Currency
  status?: $Enums.PaymentStatus
  escrowId?: string | null
  startDate?: Date | string | null
  endDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ContractUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  escrowId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ContractUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jobId?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  providerId?: Prisma.StringFieldUpdateOperationsInput | string
  totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  escrowId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ContractListRelationFilter = {
  every?: Prisma.ContractWhereInput
  some?: Prisma.ContractWhereInput
  none?: Prisma.ContractWhereInput
}

export type ContractOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ContractNullableScalarRelationFilter = {
  is?: Prisma.ContractWhereInput | null
  isNot?: Prisma.ContractWhereInput | null
}

export type ContractCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  jobId?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  providerId?: Prisma.SortOrder
  totalAmount?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  status?: Prisma.SortOrder
  escrowId?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ContractAvgOrderByAggregateInput = {
  totalAmount?: Prisma.SortOrder
}

export type ContractMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  jobId?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  providerId?: Prisma.SortOrder
  totalAmount?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  status?: Prisma.SortOrder
  escrowId?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ContractMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  jobId?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  providerId?: Prisma.SortOrder
  totalAmount?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  status?: Prisma.SortOrder
  escrowId?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ContractSumOrderByAggregateInput = {
  totalAmount?: Prisma.SortOrder
}

export type ContractScalarRelationFilter = {
  is?: Prisma.ContractWhereInput
  isNot?: Prisma.ContractWhereInput
}

export type ContractCreateNestedManyWithoutClientInput = {
  create?: Prisma.XOR<Prisma.ContractCreateWithoutClientInput, Prisma.ContractUncheckedCreateWithoutClientInput> | Prisma.ContractCreateWithoutClientInput[] | Prisma.ContractUncheckedCreateWithoutClientInput[]
  connectOrCreate?: Prisma.ContractCreateOrConnectWithoutClientInput | Prisma.ContractCreateOrConnectWithoutClientInput[]
  createMany?: Prisma.ContractCreateManyClientInputEnvelope
  connect?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
}

export type ContractCreateNestedManyWithoutProviderInput = {
  create?: Prisma.XOR<Prisma.ContractCreateWithoutProviderInput, Prisma.ContractUncheckedCreateWithoutProviderInput> | Prisma.ContractCreateWithoutProviderInput[] | Prisma.ContractUncheckedCreateWithoutProviderInput[]
  connectOrCreate?: Prisma.ContractCreateOrConnectWithoutProviderInput | Prisma.ContractCreateOrConnectWithoutProviderInput[]
  createMany?: Prisma.ContractCreateManyProviderInputEnvelope
  connect?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
}

export type ContractUncheckedCreateNestedManyWithoutClientInput = {
  create?: Prisma.XOR<Prisma.ContractCreateWithoutClientInput, Prisma.ContractUncheckedCreateWithoutClientInput> | Prisma.ContractCreateWithoutClientInput[] | Prisma.ContractUncheckedCreateWithoutClientInput[]
  connectOrCreate?: Prisma.ContractCreateOrConnectWithoutClientInput | Prisma.ContractCreateOrConnectWithoutClientInput[]
  createMany?: Prisma.ContractCreateManyClientInputEnvelope
  connect?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
}

export type ContractUncheckedCreateNestedManyWithoutProviderInput = {
  create?: Prisma.XOR<Prisma.ContractCreateWithoutProviderInput, Prisma.ContractUncheckedCreateWithoutProviderInput> | Prisma.ContractCreateWithoutProviderInput[] | Prisma.ContractUncheckedCreateWithoutProviderInput[]
  connectOrCreate?: Prisma.ContractCreateOrConnectWithoutProviderInput | Prisma.ContractCreateOrConnectWithoutProviderInput[]
  createMany?: Prisma.ContractCreateManyProviderInputEnvelope
  connect?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
}

export type ContractUpdateManyWithoutClientNestedInput = {
  create?: Prisma.XOR<Prisma.ContractCreateWithoutClientInput, Prisma.ContractUncheckedCreateWithoutClientInput> | Prisma.ContractCreateWithoutClientInput[] | Prisma.ContractUncheckedCreateWithoutClientInput[]
  connectOrCreate?: Prisma.ContractCreateOrConnectWithoutClientInput | Prisma.ContractCreateOrConnectWithoutClientInput[]
  upsert?: Prisma.ContractUpsertWithWhereUniqueWithoutClientInput | Prisma.ContractUpsertWithWhereUniqueWithoutClientInput[]
  createMany?: Prisma.ContractCreateManyClientInputEnvelope
  set?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  disconnect?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  delete?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  connect?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  update?: Prisma.ContractUpdateWithWhereUniqueWithoutClientInput | Prisma.ContractUpdateWithWhereUniqueWithoutClientInput[]
  updateMany?: Prisma.ContractUpdateManyWithWhereWithoutClientInput | Prisma.ContractUpdateManyWithWhereWithoutClientInput[]
  deleteMany?: Prisma.ContractScalarWhereInput | Prisma.ContractScalarWhereInput[]
}

export type ContractUpdateManyWithoutProviderNestedInput = {
  create?: Prisma.XOR<Prisma.ContractCreateWithoutProviderInput, Prisma.ContractUncheckedCreateWithoutProviderInput> | Prisma.ContractCreateWithoutProviderInput[] | Prisma.ContractUncheckedCreateWithoutProviderInput[]
  connectOrCreate?: Prisma.ContractCreateOrConnectWithoutProviderInput | Prisma.ContractCreateOrConnectWithoutProviderInput[]
  upsert?: Prisma.ContractUpsertWithWhereUniqueWithoutProviderInput | Prisma.ContractUpsertWithWhereUniqueWithoutProviderInput[]
  createMany?: Prisma.ContractCreateManyProviderInputEnvelope
  set?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  disconnect?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  delete?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  connect?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  update?: Prisma.ContractUpdateWithWhereUniqueWithoutProviderInput | Prisma.ContractUpdateWithWhereUniqueWithoutProviderInput[]
  updateMany?: Prisma.ContractUpdateManyWithWhereWithoutProviderInput | Prisma.ContractUpdateManyWithWhereWithoutProviderInput[]
  deleteMany?: Prisma.ContractScalarWhereInput | Prisma.ContractScalarWhereInput[]
}

export type ContractUncheckedUpdateManyWithoutClientNestedInput = {
  create?: Prisma.XOR<Prisma.ContractCreateWithoutClientInput, Prisma.ContractUncheckedCreateWithoutClientInput> | Prisma.ContractCreateWithoutClientInput[] | Prisma.ContractUncheckedCreateWithoutClientInput[]
  connectOrCreate?: Prisma.ContractCreateOrConnectWithoutClientInput | Prisma.ContractCreateOrConnectWithoutClientInput[]
  upsert?: Prisma.ContractUpsertWithWhereUniqueWithoutClientInput | Prisma.ContractUpsertWithWhereUniqueWithoutClientInput[]
  createMany?: Prisma.ContractCreateManyClientInputEnvelope
  set?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  disconnect?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  delete?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  connect?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  update?: Prisma.ContractUpdateWithWhereUniqueWithoutClientInput | Prisma.ContractUpdateWithWhereUniqueWithoutClientInput[]
  updateMany?: Prisma.ContractUpdateManyWithWhereWithoutClientInput | Prisma.ContractUpdateManyWithWhereWithoutClientInput[]
  deleteMany?: Prisma.ContractScalarWhereInput | Prisma.ContractScalarWhereInput[]
}

export type ContractUncheckedUpdateManyWithoutProviderNestedInput = {
  create?: Prisma.XOR<Prisma.ContractCreateWithoutProviderInput, Prisma.ContractUncheckedCreateWithoutProviderInput> | Prisma.ContractCreateWithoutProviderInput[] | Prisma.ContractUncheckedCreateWithoutProviderInput[]
  connectOrCreate?: Prisma.ContractCreateOrConnectWithoutProviderInput | Prisma.ContractCreateOrConnectWithoutProviderInput[]
  upsert?: Prisma.ContractUpsertWithWhereUniqueWithoutProviderInput | Prisma.ContractUpsertWithWhereUniqueWithoutProviderInput[]
  createMany?: Prisma.ContractCreateManyProviderInputEnvelope
  set?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  disconnect?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  delete?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  connect?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  update?: Prisma.ContractUpdateWithWhereUniqueWithoutProviderInput | Prisma.ContractUpdateWithWhereUniqueWithoutProviderInput[]
  updateMany?: Prisma.ContractUpdateManyWithWhereWithoutProviderInput | Prisma.ContractUpdateManyWithWhereWithoutProviderInput[]
  deleteMany?: Prisma.ContractScalarWhereInput | Prisma.ContractScalarWhereInput[]
}

export type ContractCreateNestedOneWithoutJobInput = {
  create?: Prisma.XOR<Prisma.ContractCreateWithoutJobInput, Prisma.ContractUncheckedCreateWithoutJobInput>
  connectOrCreate?: Prisma.ContractCreateOrConnectWithoutJobInput
  connect?: Prisma.ContractWhereUniqueInput
}

export type ContractUncheckedCreateNestedOneWithoutJobInput = {
  create?: Prisma.XOR<Prisma.ContractCreateWithoutJobInput, Prisma.ContractUncheckedCreateWithoutJobInput>
  connectOrCreate?: Prisma.ContractCreateOrConnectWithoutJobInput
  connect?: Prisma.ContractWhereUniqueInput
}

export type ContractUpdateOneWithoutJobNestedInput = {
  create?: Prisma.XOR<Prisma.ContractCreateWithoutJobInput, Prisma.ContractUncheckedCreateWithoutJobInput>
  connectOrCreate?: Prisma.ContractCreateOrConnectWithoutJobInput
  upsert?: Prisma.ContractUpsertWithoutJobInput
  disconnect?: Prisma.ContractWhereInput | boolean
  delete?: Prisma.ContractWhereInput | boolean
  connect?: Prisma.ContractWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ContractUpdateToOneWithWhereWithoutJobInput, Prisma.ContractUpdateWithoutJobInput>, Prisma.ContractUncheckedUpdateWithoutJobInput>
}

export type ContractUncheckedUpdateOneWithoutJobNestedInput = {
  create?: Prisma.XOR<Prisma.ContractCreateWithoutJobInput, Prisma.ContractUncheckedCreateWithoutJobInput>
  connectOrCreate?: Prisma.ContractCreateOrConnectWithoutJobInput
  upsert?: Prisma.ContractUpsertWithoutJobInput
  disconnect?: Prisma.ContractWhereInput | boolean
  delete?: Prisma.ContractWhereInput | boolean
  connect?: Prisma.ContractWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ContractUpdateToOneWithWhereWithoutJobInput, Prisma.ContractUpdateWithoutJobInput>, Prisma.ContractUncheckedUpdateWithoutJobInput>
}

export type EnumPaymentStatusFieldUpdateOperationsInput = {
  set?: $Enums.PaymentStatus
}

export type ContractCreateNestedOneWithoutMilestonesInput = {
  create?: Prisma.XOR<Prisma.ContractCreateWithoutMilestonesInput, Prisma.ContractUncheckedCreateWithoutMilestonesInput>
  connectOrCreate?: Prisma.ContractCreateOrConnectWithoutMilestonesInput
  connect?: Prisma.ContractWhereUniqueInput
}

export type ContractUpdateOneRequiredWithoutMilestonesNestedInput = {
  create?: Prisma.XOR<Prisma.ContractCreateWithoutMilestonesInput, Prisma.ContractUncheckedCreateWithoutMilestonesInput>
  connectOrCreate?: Prisma.ContractCreateOrConnectWithoutMilestonesInput
  upsert?: Prisma.ContractUpsertWithoutMilestonesInput
  connect?: Prisma.ContractWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ContractUpdateToOneWithWhereWithoutMilestonesInput, Prisma.ContractUpdateWithoutMilestonesInput>, Prisma.ContractUncheckedUpdateWithoutMilestonesInput>
}

export type ContractCreateNestedOneWithoutDisputeInput = {
  create?: Prisma.XOR<Prisma.ContractCreateWithoutDisputeInput, Prisma.ContractUncheckedCreateWithoutDisputeInput>
  connectOrCreate?: Prisma.ContractCreateOrConnectWithoutDisputeInput
  connect?: Prisma.ContractWhereUniqueInput
}

export type ContractUpdateOneWithoutDisputeNestedInput = {
  create?: Prisma.XOR<Prisma.ContractCreateWithoutDisputeInput, Prisma.ContractUncheckedCreateWithoutDisputeInput>
  connectOrCreate?: Prisma.ContractCreateOrConnectWithoutDisputeInput
  upsert?: Prisma.ContractUpsertWithoutDisputeInput
  disconnect?: Prisma.ContractWhereInput | boolean
  delete?: Prisma.ContractWhereInput | boolean
  connect?: Prisma.ContractWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ContractUpdateToOneWithWhereWithoutDisputeInput, Prisma.ContractUpdateWithoutDisputeInput>, Prisma.ContractUncheckedUpdateWithoutDisputeInput>
}

export type ContractCreateWithoutClientInput = {
  id?: string
  totalAmount: number
  currency?: $Enums.Currency
  status?: $Enums.PaymentStatus
  escrowId?: string | null
  startDate?: Date | string | null
  endDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  job: Prisma.JobCreateNestedOneWithoutContractInput
  provider: Prisma.UserCreateNestedOneWithoutContractsAsProviderInput
  milestones?: Prisma.MilestoneCreateNestedManyWithoutContractInput
  dispute?: Prisma.DisputeCreateNestedOneWithoutContractInput
}

export type ContractUncheckedCreateWithoutClientInput = {
  id?: string
  jobId: string
  providerId: string
  totalAmount: number
  currency?: $Enums.Currency
  status?: $Enums.PaymentStatus
  escrowId?: string | null
  startDate?: Date | string | null
  endDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  milestones?: Prisma.MilestoneUncheckedCreateNestedManyWithoutContractInput
  dispute?: Prisma.DisputeUncheckedCreateNestedOneWithoutContractInput
}

export type ContractCreateOrConnectWithoutClientInput = {
  where: Prisma.ContractWhereUniqueInput
  create: Prisma.XOR<Prisma.ContractCreateWithoutClientInput, Prisma.ContractUncheckedCreateWithoutClientInput>
}

export type ContractCreateManyClientInputEnvelope = {
  data: Prisma.ContractCreateManyClientInput | Prisma.ContractCreateManyClientInput[]
  skipDuplicates?: boolean
}

export type ContractCreateWithoutProviderInput = {
  id?: string
  totalAmount: number
  currency?: $Enums.Currency
  status?: $Enums.PaymentStatus
  escrowId?: string | null
  startDate?: Date | string | null
  endDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  job: Prisma.JobCreateNestedOneWithoutContractInput
  client: Prisma.UserCreateNestedOneWithoutContractsAsClientInput
  milestones?: Prisma.MilestoneCreateNestedManyWithoutContractInput
  dispute?: Prisma.DisputeCreateNestedOneWithoutContractInput
}

export type ContractUncheckedCreateWithoutProviderInput = {
  id?: string
  jobId: string
  clientId: string
  totalAmount: number
  currency?: $Enums.Currency
  status?: $Enums.PaymentStatus
  escrowId?: string | null
  startDate?: Date | string | null
  endDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  milestones?: Prisma.MilestoneUncheckedCreateNestedManyWithoutContractInput
  dispute?: Prisma.DisputeUncheckedCreateNestedOneWithoutContractInput
}

export type ContractCreateOrConnectWithoutProviderInput = {
  where: Prisma.ContractWhereUniqueInput
  create: Prisma.XOR<Prisma.ContractCreateWithoutProviderInput, Prisma.ContractUncheckedCreateWithoutProviderInput>
}

export type ContractCreateManyProviderInputEnvelope = {
  data: Prisma.ContractCreateManyProviderInput | Prisma.ContractCreateManyProviderInput[]
  skipDuplicates?: boolean
}

export type ContractUpsertWithWhereUniqueWithoutClientInput = {
  where: Prisma.ContractWhereUniqueInput
  update: Prisma.XOR<Prisma.ContractUpdateWithoutClientInput, Prisma.ContractUncheckedUpdateWithoutClientInput>
  create: Prisma.XOR<Prisma.ContractCreateWithoutClientInput, Prisma.ContractUncheckedCreateWithoutClientInput>
}

export type ContractUpdateWithWhereUniqueWithoutClientInput = {
  where: Prisma.ContractWhereUniqueInput
  data: Prisma.XOR<Prisma.ContractUpdateWithoutClientInput, Prisma.ContractUncheckedUpdateWithoutClientInput>
}

export type ContractUpdateManyWithWhereWithoutClientInput = {
  where: Prisma.ContractScalarWhereInput
  data: Prisma.XOR<Prisma.ContractUpdateManyMutationInput, Prisma.ContractUncheckedUpdateManyWithoutClientInput>
}

export type ContractScalarWhereInput = {
  AND?: Prisma.ContractScalarWhereInput | Prisma.ContractScalarWhereInput[]
  OR?: Prisma.ContractScalarWhereInput[]
  NOT?: Prisma.ContractScalarWhereInput | Prisma.ContractScalarWhereInput[]
  id?: Prisma.StringFilter<"Contract"> | string
  jobId?: Prisma.StringFilter<"Contract"> | string
  clientId?: Prisma.StringFilter<"Contract"> | string
  providerId?: Prisma.StringFilter<"Contract"> | string
  totalAmount?: Prisma.FloatFilter<"Contract"> | number
  currency?: Prisma.EnumCurrencyFilter<"Contract"> | $Enums.Currency
  status?: Prisma.EnumPaymentStatusFilter<"Contract"> | $Enums.PaymentStatus
  escrowId?: Prisma.StringNullableFilter<"Contract"> | string | null
  startDate?: Prisma.DateTimeNullableFilter<"Contract"> | Date | string | null
  endDate?: Prisma.DateTimeNullableFilter<"Contract"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"Contract"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Contract"> | Date | string
}

export type ContractUpsertWithWhereUniqueWithoutProviderInput = {
  where: Prisma.ContractWhereUniqueInput
  update: Prisma.XOR<Prisma.ContractUpdateWithoutProviderInput, Prisma.ContractUncheckedUpdateWithoutProviderInput>
  create: Prisma.XOR<Prisma.ContractCreateWithoutProviderInput, Prisma.ContractUncheckedCreateWithoutProviderInput>
}

export type ContractUpdateWithWhereUniqueWithoutProviderInput = {
  where: Prisma.ContractWhereUniqueInput
  data: Prisma.XOR<Prisma.ContractUpdateWithoutProviderInput, Prisma.ContractUncheckedUpdateWithoutProviderInput>
}

export type ContractUpdateManyWithWhereWithoutProviderInput = {
  where: Prisma.ContractScalarWhereInput
  data: Prisma.XOR<Prisma.ContractUpdateManyMutationInput, Prisma.ContractUncheckedUpdateManyWithoutProviderInput>
}

export type ContractCreateWithoutJobInput = {
  id?: string
  totalAmount: number
  currency?: $Enums.Currency
  status?: $Enums.PaymentStatus
  escrowId?: string | null
  startDate?: Date | string | null
  endDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  client: Prisma.UserCreateNestedOneWithoutContractsAsClientInput
  provider: Prisma.UserCreateNestedOneWithoutContractsAsProviderInput
  milestones?: Prisma.MilestoneCreateNestedManyWithoutContractInput
  dispute?: Prisma.DisputeCreateNestedOneWithoutContractInput
}

export type ContractUncheckedCreateWithoutJobInput = {
  id?: string
  clientId: string
  providerId: string
  totalAmount: number
  currency?: $Enums.Currency
  status?: $Enums.PaymentStatus
  escrowId?: string | null
  startDate?: Date | string | null
  endDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  milestones?: Prisma.MilestoneUncheckedCreateNestedManyWithoutContractInput
  dispute?: Prisma.DisputeUncheckedCreateNestedOneWithoutContractInput
}

export type ContractCreateOrConnectWithoutJobInput = {
  where: Prisma.ContractWhereUniqueInput
  create: Prisma.XOR<Prisma.ContractCreateWithoutJobInput, Prisma.ContractUncheckedCreateWithoutJobInput>
}

export type ContractUpsertWithoutJobInput = {
  update: Prisma.XOR<Prisma.ContractUpdateWithoutJobInput, Prisma.ContractUncheckedUpdateWithoutJobInput>
  create: Prisma.XOR<Prisma.ContractCreateWithoutJobInput, Prisma.ContractUncheckedCreateWithoutJobInput>
  where?: Prisma.ContractWhereInput
}

export type ContractUpdateToOneWithWhereWithoutJobInput = {
  where?: Prisma.ContractWhereInput
  data: Prisma.XOR<Prisma.ContractUpdateWithoutJobInput, Prisma.ContractUncheckedUpdateWithoutJobInput>
}

export type ContractUpdateWithoutJobInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  escrowId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  client?: Prisma.UserUpdateOneRequiredWithoutContractsAsClientNestedInput
  provider?: Prisma.UserUpdateOneRequiredWithoutContractsAsProviderNestedInput
  milestones?: Prisma.MilestoneUpdateManyWithoutContractNestedInput
  dispute?: Prisma.DisputeUpdateOneWithoutContractNestedInput
}

export type ContractUncheckedUpdateWithoutJobInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  providerId?: Prisma.StringFieldUpdateOperationsInput | string
  totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  escrowId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  milestones?: Prisma.MilestoneUncheckedUpdateManyWithoutContractNestedInput
  dispute?: Prisma.DisputeUncheckedUpdateOneWithoutContractNestedInput
}

export type ContractCreateWithoutMilestonesInput = {
  id?: string
  totalAmount: number
  currency?: $Enums.Currency
  status?: $Enums.PaymentStatus
  escrowId?: string | null
  startDate?: Date | string | null
  endDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  job: Prisma.JobCreateNestedOneWithoutContractInput
  client: Prisma.UserCreateNestedOneWithoutContractsAsClientInput
  provider: Prisma.UserCreateNestedOneWithoutContractsAsProviderInput
  dispute?: Prisma.DisputeCreateNestedOneWithoutContractInput
}

export type ContractUncheckedCreateWithoutMilestonesInput = {
  id?: string
  jobId: string
  clientId: string
  providerId: string
  totalAmount: number
  currency?: $Enums.Currency
  status?: $Enums.PaymentStatus
  escrowId?: string | null
  startDate?: Date | string | null
  endDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  dispute?: Prisma.DisputeUncheckedCreateNestedOneWithoutContractInput
}

export type ContractCreateOrConnectWithoutMilestonesInput = {
  where: Prisma.ContractWhereUniqueInput
  create: Prisma.XOR<Prisma.ContractCreateWithoutMilestonesInput, Prisma.ContractUncheckedCreateWithoutMilestonesInput>
}

export type ContractUpsertWithoutMilestonesInput = {
  update: Prisma.XOR<Prisma.ContractUpdateWithoutMilestonesInput, Prisma.ContractUncheckedUpdateWithoutMilestonesInput>
  create: Prisma.XOR<Prisma.ContractCreateWithoutMilestonesInput, Prisma.ContractUncheckedCreateWithoutMilestonesInput>
  where?: Prisma.ContractWhereInput
}

export type ContractUpdateToOneWithWhereWithoutMilestonesInput = {
  where?: Prisma.ContractWhereInput
  data: Prisma.XOR<Prisma.ContractUpdateWithoutMilestonesInput, Prisma.ContractUncheckedUpdateWithoutMilestonesInput>
}

export type ContractUpdateWithoutMilestonesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  escrowId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  job?: Prisma.JobUpdateOneRequiredWithoutContractNestedInput
  client?: Prisma.UserUpdateOneRequiredWithoutContractsAsClientNestedInput
  provider?: Prisma.UserUpdateOneRequiredWithoutContractsAsProviderNestedInput
  dispute?: Prisma.DisputeUpdateOneWithoutContractNestedInput
}

export type ContractUncheckedUpdateWithoutMilestonesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jobId?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  providerId?: Prisma.StringFieldUpdateOperationsInput | string
  totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  escrowId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dispute?: Prisma.DisputeUncheckedUpdateOneWithoutContractNestedInput
}

export type ContractCreateWithoutDisputeInput = {
  id?: string
  totalAmount: number
  currency?: $Enums.Currency
  status?: $Enums.PaymentStatus
  escrowId?: string | null
  startDate?: Date | string | null
  endDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  job: Prisma.JobCreateNestedOneWithoutContractInput
  client: Prisma.UserCreateNestedOneWithoutContractsAsClientInput
  provider: Prisma.UserCreateNestedOneWithoutContractsAsProviderInput
  milestones?: Prisma.MilestoneCreateNestedManyWithoutContractInput
}

export type ContractUncheckedCreateWithoutDisputeInput = {
  id?: string
  jobId: string
  clientId: string
  providerId: string
  totalAmount: number
  currency?: $Enums.Currency
  status?: $Enums.PaymentStatus
  escrowId?: string | null
  startDate?: Date | string | null
  endDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  milestones?: Prisma.MilestoneUncheckedCreateNestedManyWithoutContractInput
}

export type ContractCreateOrConnectWithoutDisputeInput = {
  where: Prisma.ContractWhereUniqueInput
  create: Prisma.XOR<Prisma.ContractCreateWithoutDisputeInput, Prisma.ContractUncheckedCreateWithoutDisputeInput>
}

export type ContractUpsertWithoutDisputeInput = {
  update: Prisma.XOR<Prisma.ContractUpdateWithoutDisputeInput, Prisma.ContractUncheckedUpdateWithoutDisputeInput>
  create: Prisma.XOR<Prisma.ContractCreateWithoutDisputeInput, Prisma.ContractUncheckedCreateWithoutDisputeInput>
  where?: Prisma.ContractWhereInput
}

export type ContractUpdateToOneWithWhereWithoutDisputeInput = {
  where?: Prisma.ContractWhereInput
  data: Prisma.XOR<Prisma.ContractUpdateWithoutDisputeInput, Prisma.ContractUncheckedUpdateWithoutDisputeInput>
}

export type ContractUpdateWithoutDisputeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  escrowId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  job?: Prisma.JobUpdateOneRequiredWithoutContractNestedInput
  client?: Prisma.UserUpdateOneRequiredWithoutContractsAsClientNestedInput
  provider?: Prisma.UserUpdateOneRequiredWithoutContractsAsProviderNestedInput
  milestones?: Prisma.MilestoneUpdateManyWithoutContractNestedInput
}

export type ContractUncheckedUpdateWithoutDisputeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jobId?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  providerId?: Prisma.StringFieldUpdateOperationsInput | string
  totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  escrowId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  milestones?: Prisma.MilestoneUncheckedUpdateManyWithoutContractNestedInput
}

export type ContractCreateManyClientInput = {
  id?: string
  jobId: string
  providerId: string
  totalAmount: number
  currency?: $Enums.Currency
  status?: $Enums.PaymentStatus
  escrowId?: string | null
  startDate?: Date | string | null
  endDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ContractCreateManyProviderInput = {
  id?: string
  jobId: string
  clientId: string
  totalAmount: number
  currency?: $Enums.Currency
  status?: $Enums.PaymentStatus
  escrowId?: string | null
  startDate?: Date | string | null
  endDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ContractUpdateWithoutClientInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  escrowId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  job?: Prisma.JobUpdateOneRequiredWithoutContractNestedInput
  provider?: Prisma.UserUpdateOneRequiredWithoutContractsAsProviderNestedInput
  milestones?: Prisma.MilestoneUpdateManyWithoutContractNestedInput
  dispute?: Prisma.DisputeUpdateOneWithoutContractNestedInput
}

export type ContractUncheckedUpdateWithoutClientInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jobId?: Prisma.StringFieldUpdateOperationsInput | string
  providerId?: Prisma.StringFieldUpdateOperationsInput | string
  totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  escrowId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  milestones?: Prisma.MilestoneUncheckedUpdateManyWithoutContractNestedInput
  dispute?: Prisma.DisputeUncheckedUpdateOneWithoutContractNestedInput
}

export type ContractUncheckedUpdateManyWithoutClientInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jobId?: Prisma.StringFieldUpdateOperationsInput | string
  providerId?: Prisma.StringFieldUpdateOperationsInput | string
  totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  escrowId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ContractUpdateWithoutProviderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  escrowId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  job?: Prisma.JobUpdateOneRequiredWithoutContractNestedInput
  client?: Prisma.UserUpdateOneRequiredWithoutContractsAsClientNestedInput
  milestones?: Prisma.MilestoneUpdateManyWithoutContractNestedInput
  dispute?: Prisma.DisputeUpdateOneWithoutContractNestedInput
}

export type ContractUncheckedUpdateWithoutProviderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jobId?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  escrowId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  milestones?: Prisma.MilestoneUncheckedUpdateManyWithoutContractNestedInput
  dispute?: Prisma.DisputeUncheckedUpdateOneWithoutContractNestedInput
}

export type ContractUncheckedUpdateManyWithoutProviderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jobId?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  totalAmount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
  status?: Prisma.EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  escrowId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type ContractCountOutputType
 */

export type ContractCountOutputType = {
  milestones: number
}

export type ContractCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  milestones?: boolean | ContractCountOutputTypeCountMilestonesArgs
}

/**
 * ContractCountOutputType without action
 */
export type ContractCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContractCountOutputType
   */
  select?: Prisma.ContractCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ContractCountOutputType without action
 */
export type ContractCountOutputTypeCountMilestonesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MilestoneWhereInput
}


export type ContractSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  jobId?: boolean
  clientId?: boolean
  providerId?: boolean
  totalAmount?: boolean
  currency?: boolean
  status?: boolean
  escrowId?: boolean
  startDate?: boolean
  endDate?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  job?: boolean | Prisma.JobDefaultArgs<ExtArgs>
  client?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  provider?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  milestones?: boolean | Prisma.Contract$milestonesArgs<ExtArgs>
  dispute?: boolean | Prisma.Contract$disputeArgs<ExtArgs>
  _count?: boolean | Prisma.ContractCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["contract"]>

export type ContractSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  jobId?: boolean
  clientId?: boolean
  providerId?: boolean
  totalAmount?: boolean
  currency?: boolean
  status?: boolean
  escrowId?: boolean
  startDate?: boolean
  endDate?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  job?: boolean | Prisma.JobDefaultArgs<ExtArgs>
  client?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  provider?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["contract"]>

export type ContractSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  jobId?: boolean
  clientId?: boolean
  providerId?: boolean
  totalAmount?: boolean
  currency?: boolean
  status?: boolean
  escrowId?: boolean
  startDate?: boolean
  endDate?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  job?: boolean | Prisma.JobDefaultArgs<ExtArgs>
  client?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  provider?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["contract"]>

export type ContractSelectScalar = {
  id?: boolean
  jobId?: boolean
  clientId?: boolean
  providerId?: boolean
  totalAmount?: boolean
  currency?: boolean
  status?: boolean
  escrowId?: boolean
  startDate?: boolean
  endDate?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ContractOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "jobId" | "clientId" | "providerId" | "totalAmount" | "currency" | "status" | "escrowId" | "startDate" | "endDate" | "createdAt" | "updatedAt", ExtArgs["result"]["contract"]>
export type ContractInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  job?: boolean | Prisma.JobDefaultArgs<ExtArgs>
  client?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  provider?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  milestones?: boolean | Prisma.Contract$milestonesArgs<ExtArgs>
  dispute?: boolean | Prisma.Contract$disputeArgs<ExtArgs>
  _count?: boolean | Prisma.ContractCountOutputTypeDefaultArgs<ExtArgs>
}
export type ContractIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  job?: boolean | Prisma.JobDefaultArgs<ExtArgs>
  client?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  provider?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type ContractIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  job?: boolean | Prisma.JobDefaultArgs<ExtArgs>
  client?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  provider?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $ContractPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Contract"
  objects: {
    job: Prisma.$JobPayload<ExtArgs>
    client: Prisma.$UserPayload<ExtArgs>
    provider: Prisma.$UserPayload<ExtArgs>
    milestones: Prisma.$MilestonePayload<ExtArgs>[]
    dispute: Prisma.$DisputePayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    jobId: string
    clientId: string
    providerId: string
    totalAmount: number
    currency: $Enums.Currency
    status: $Enums.PaymentStatus
    escrowId: string | null
    startDate: Date | null
    endDate: Date | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["contract"]>
  composites: {}
}

export type ContractGetPayload<S extends boolean | null | undefined | ContractDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ContractPayload, S>

export type ContractCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ContractFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ContractCountAggregateInputType | true
  }

export interface ContractDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contract'], meta: { name: 'Contract' } }
  /**
   * Find zero or one Contract that matches the filter.
   * @param {ContractFindUniqueArgs} args - Arguments to find a Contract
   * @example
   * // Get one Contract
   * const contract = await prisma.contract.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ContractFindUniqueArgs>(args: Prisma.SelectSubset<T, ContractFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ContractClient<runtime.Types.Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Contract that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ContractFindUniqueOrThrowArgs} args - Arguments to find a Contract
   * @example
   * // Get one Contract
   * const contract = await prisma.contract.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ContractFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ContractFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ContractClient<runtime.Types.Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Contract that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContractFindFirstArgs} args - Arguments to find a Contract
   * @example
   * // Get one Contract
   * const contract = await prisma.contract.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ContractFindFirstArgs>(args?: Prisma.SelectSubset<T, ContractFindFirstArgs<ExtArgs>>): Prisma.Prisma__ContractClient<runtime.Types.Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Contract that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContractFindFirstOrThrowArgs} args - Arguments to find a Contract
   * @example
   * // Get one Contract
   * const contract = await prisma.contract.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ContractFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ContractFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ContractClient<runtime.Types.Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Contracts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContractFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Contracts
   * const contracts = await prisma.contract.findMany()
   * 
   * // Get first 10 Contracts
   * const contracts = await prisma.contract.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const contractWithIdOnly = await prisma.contract.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ContractFindManyArgs>(args?: Prisma.SelectSubset<T, ContractFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Contract.
   * @param {ContractCreateArgs} args - Arguments to create a Contract.
   * @example
   * // Create one Contract
   * const Contract = await prisma.contract.create({
   *   data: {
   *     // ... data to create a Contract
   *   }
   * })
   * 
   */
  create<T extends ContractCreateArgs>(args: Prisma.SelectSubset<T, ContractCreateArgs<ExtArgs>>): Prisma.Prisma__ContractClient<runtime.Types.Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Contracts.
   * @param {ContractCreateManyArgs} args - Arguments to create many Contracts.
   * @example
   * // Create many Contracts
   * const contract = await prisma.contract.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ContractCreateManyArgs>(args?: Prisma.SelectSubset<T, ContractCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Contracts and returns the data saved in the database.
   * @param {ContractCreateManyAndReturnArgs} args - Arguments to create many Contracts.
   * @example
   * // Create many Contracts
   * const contract = await prisma.contract.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Contracts and only return the `id`
   * const contractWithIdOnly = await prisma.contract.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ContractCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ContractCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Contract.
   * @param {ContractDeleteArgs} args - Arguments to delete one Contract.
   * @example
   * // Delete one Contract
   * const Contract = await prisma.contract.delete({
   *   where: {
   *     // ... filter to delete one Contract
   *   }
   * })
   * 
   */
  delete<T extends ContractDeleteArgs>(args: Prisma.SelectSubset<T, ContractDeleteArgs<ExtArgs>>): Prisma.Prisma__ContractClient<runtime.Types.Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Contract.
   * @param {ContractUpdateArgs} args - Arguments to update one Contract.
   * @example
   * // Update one Contract
   * const contract = await prisma.contract.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ContractUpdateArgs>(args: Prisma.SelectSubset<T, ContractUpdateArgs<ExtArgs>>): Prisma.Prisma__ContractClient<runtime.Types.Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Contracts.
   * @param {ContractDeleteManyArgs} args - Arguments to filter Contracts to delete.
   * @example
   * // Delete a few Contracts
   * const { count } = await prisma.contract.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ContractDeleteManyArgs>(args?: Prisma.SelectSubset<T, ContractDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Contracts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContractUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Contracts
   * const contract = await prisma.contract.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ContractUpdateManyArgs>(args: Prisma.SelectSubset<T, ContractUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Contracts and returns the data updated in the database.
   * @param {ContractUpdateManyAndReturnArgs} args - Arguments to update many Contracts.
   * @example
   * // Update many Contracts
   * const contract = await prisma.contract.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Contracts and only return the `id`
   * const contractWithIdOnly = await prisma.contract.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ContractUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ContractUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Contract.
   * @param {ContractUpsertArgs} args - Arguments to update or create a Contract.
   * @example
   * // Update or create a Contract
   * const contract = await prisma.contract.upsert({
   *   create: {
   *     // ... data to create a Contract
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Contract we want to update
   *   }
   * })
   */
  upsert<T extends ContractUpsertArgs>(args: Prisma.SelectSubset<T, ContractUpsertArgs<ExtArgs>>): Prisma.Prisma__ContractClient<runtime.Types.Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Contracts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContractCountArgs} args - Arguments to filter Contracts to count.
   * @example
   * // Count the number of Contracts
   * const count = await prisma.contract.count({
   *   where: {
   *     // ... the filter for the Contracts we want to count
   *   }
   * })
  **/
  count<T extends ContractCountArgs>(
    args?: Prisma.Subset<T, ContractCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ContractCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Contract.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContractAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ContractAggregateArgs>(args: Prisma.Subset<T, ContractAggregateArgs>): Prisma.PrismaPromise<GetContractAggregateType<T>>

  /**
   * Group by Contract.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContractGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ContractGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ContractGroupByArgs['orderBy'] }
      : { orderBy?: ContractGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ContractGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContractGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Contract model
 */
readonly fields: ContractFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Contract.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ContractClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  job<T extends Prisma.JobDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.JobDefaultArgs<ExtArgs>>): Prisma.Prisma__JobClient<runtime.Types.Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  client<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  provider<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  milestones<T extends Prisma.Contract$milestonesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Contract$milestonesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MilestonePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  dispute<T extends Prisma.Contract$disputeArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Contract$disputeArgs<ExtArgs>>): Prisma.Prisma__DisputeClient<runtime.Types.Result.GetResult<Prisma.$DisputePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Contract model
 */
export interface ContractFieldRefs {
  readonly id: Prisma.FieldRef<"Contract", 'String'>
  readonly jobId: Prisma.FieldRef<"Contract", 'String'>
  readonly clientId: Prisma.FieldRef<"Contract", 'String'>
  readonly providerId: Prisma.FieldRef<"Contract", 'String'>
  readonly totalAmount: Prisma.FieldRef<"Contract", 'Float'>
  readonly currency: Prisma.FieldRef<"Contract", 'Currency'>
  readonly status: Prisma.FieldRef<"Contract", 'PaymentStatus'>
  readonly escrowId: Prisma.FieldRef<"Contract", 'String'>
  readonly startDate: Prisma.FieldRef<"Contract", 'DateTime'>
  readonly endDate: Prisma.FieldRef<"Contract", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"Contract", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Contract", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Contract findUnique
 */
export type ContractFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contract
   */
  select?: Prisma.ContractSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Contract
   */
  omit?: Prisma.ContractOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContractInclude<ExtArgs> | null
  /**
   * Filter, which Contract to fetch.
   */
  where: Prisma.ContractWhereUniqueInput
}

/**
 * Contract findUniqueOrThrow
 */
export type ContractFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contract
   */
  select?: Prisma.ContractSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Contract
   */
  omit?: Prisma.ContractOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContractInclude<ExtArgs> | null
  /**
   * Filter, which Contract to fetch.
   */
  where: Prisma.ContractWhereUniqueInput
}

/**
 * Contract findFirst
 */
export type ContractFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contract
   */
  select?: Prisma.ContractSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Contract
   */
  omit?: Prisma.ContractOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContractInclude<ExtArgs> | null
  /**
   * Filter, which Contract to fetch.
   */
  where?: Prisma.ContractWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Contracts to fetch.
   */
  orderBy?: Prisma.ContractOrderByWithRelationInput | Prisma.ContractOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Contracts.
   */
  cursor?: Prisma.ContractWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Contracts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Contracts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Contracts.
   */
  distinct?: Prisma.ContractScalarFieldEnum | Prisma.ContractScalarFieldEnum[]
}

/**
 * Contract findFirstOrThrow
 */
export type ContractFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contract
   */
  select?: Prisma.ContractSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Contract
   */
  omit?: Prisma.ContractOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContractInclude<ExtArgs> | null
  /**
   * Filter, which Contract to fetch.
   */
  where?: Prisma.ContractWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Contracts to fetch.
   */
  orderBy?: Prisma.ContractOrderByWithRelationInput | Prisma.ContractOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Contracts.
   */
  cursor?: Prisma.ContractWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Contracts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Contracts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Contracts.
   */
  distinct?: Prisma.ContractScalarFieldEnum | Prisma.ContractScalarFieldEnum[]
}

/**
 * Contract findMany
 */
export type ContractFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contract
   */
  select?: Prisma.ContractSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Contract
   */
  omit?: Prisma.ContractOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContractInclude<ExtArgs> | null
  /**
   * Filter, which Contracts to fetch.
   */
  where?: Prisma.ContractWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Contracts to fetch.
   */
  orderBy?: Prisma.ContractOrderByWithRelationInput | Prisma.ContractOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Contracts.
   */
  cursor?: Prisma.ContractWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Contracts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Contracts.
   */
  skip?: number
  distinct?: Prisma.ContractScalarFieldEnum | Prisma.ContractScalarFieldEnum[]
}

/**
 * Contract create
 */
export type ContractCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contract
   */
  select?: Prisma.ContractSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Contract
   */
  omit?: Prisma.ContractOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContractInclude<ExtArgs> | null
  /**
   * The data needed to create a Contract.
   */
  data: Prisma.XOR<Prisma.ContractCreateInput, Prisma.ContractUncheckedCreateInput>
}

/**
 * Contract createMany
 */
export type ContractCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Contracts.
   */
  data: Prisma.ContractCreateManyInput | Prisma.ContractCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Contract createManyAndReturn
 */
export type ContractCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contract
   */
  select?: Prisma.ContractSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Contract
   */
  omit?: Prisma.ContractOmit<ExtArgs> | null
  /**
   * The data used to create many Contracts.
   */
  data: Prisma.ContractCreateManyInput | Prisma.ContractCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContractIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Contract update
 */
export type ContractUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contract
   */
  select?: Prisma.ContractSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Contract
   */
  omit?: Prisma.ContractOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContractInclude<ExtArgs> | null
  /**
   * The data needed to update a Contract.
   */
  data: Prisma.XOR<Prisma.ContractUpdateInput, Prisma.ContractUncheckedUpdateInput>
  /**
   * Choose, which Contract to update.
   */
  where: Prisma.ContractWhereUniqueInput
}

/**
 * Contract updateMany
 */
export type ContractUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Contracts.
   */
  data: Prisma.XOR<Prisma.ContractUpdateManyMutationInput, Prisma.ContractUncheckedUpdateManyInput>
  /**
   * Filter which Contracts to update
   */
  where?: Prisma.ContractWhereInput
  /**
   * Limit how many Contracts to update.
   */
  limit?: number
}

/**
 * Contract updateManyAndReturn
 */
export type ContractUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contract
   */
  select?: Prisma.ContractSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Contract
   */
  omit?: Prisma.ContractOmit<ExtArgs> | null
  /**
   * The data used to update Contracts.
   */
  data: Prisma.XOR<Prisma.ContractUpdateManyMutationInput, Prisma.ContractUncheckedUpdateManyInput>
  /**
   * Filter which Contracts to update
   */
  where?: Prisma.ContractWhereInput
  /**
   * Limit how many Contracts to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContractIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Contract upsert
 */
export type ContractUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contract
   */
  select?: Prisma.ContractSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Contract
   */
  omit?: Prisma.ContractOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContractInclude<ExtArgs> | null
  /**
   * The filter to search for the Contract to update in case it exists.
   */
  where: Prisma.ContractWhereUniqueInput
  /**
   * In case the Contract found by the `where` argument doesn't exist, create a new Contract with this data.
   */
  create: Prisma.XOR<Prisma.ContractCreateInput, Prisma.ContractUncheckedCreateInput>
  /**
   * In case the Contract was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ContractUpdateInput, Prisma.ContractUncheckedUpdateInput>
}

/**
 * Contract delete
 */
export type ContractDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contract
   */
  select?: Prisma.ContractSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Contract
   */
  omit?: Prisma.ContractOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContractInclude<ExtArgs> | null
  /**
   * Filter which Contract to delete.
   */
  where: Prisma.ContractWhereUniqueInput
}

/**
 * Contract deleteMany
 */
export type ContractDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Contracts to delete
   */
  where?: Prisma.ContractWhereInput
  /**
   * Limit how many Contracts to delete.
   */
  limit?: number
}

/**
 * Contract.milestones
 */
export type Contract$milestonesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Milestone
   */
  select?: Prisma.MilestoneSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Milestone
   */
  omit?: Prisma.MilestoneOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MilestoneInclude<ExtArgs> | null
  where?: Prisma.MilestoneWhereInput
  orderBy?: Prisma.MilestoneOrderByWithRelationInput | Prisma.MilestoneOrderByWithRelationInput[]
  cursor?: Prisma.MilestoneWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.MilestoneScalarFieldEnum | Prisma.MilestoneScalarFieldEnum[]
}

/**
 * Contract.dispute
 */
export type Contract$disputeArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Dispute
   */
  select?: Prisma.DisputeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Dispute
   */
  omit?: Prisma.DisputeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DisputeInclude<ExtArgs> | null
  where?: Prisma.DisputeWhereInput
}

/**
 * Contract without action
 */
export type ContractDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contract
   */
  select?: Prisma.ContractSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Contract
   */
  omit?: Prisma.ContractOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContractInclude<ExtArgs> | null
}
