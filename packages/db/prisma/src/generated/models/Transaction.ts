
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Transaction` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Transaction
 * 
 */
export type TransactionModel = runtime.Types.Result.DefaultSelection<Prisma.$TransactionPayload>

export type AggregateTransaction = {
  _count: TransactionCountAggregateOutputType | null
  _avg: TransactionAvgAggregateOutputType | null
  _sum: TransactionSumAggregateOutputType | null
  _min: TransactionMinAggregateOutputType | null
  _max: TransactionMaxAggregateOutputType | null
}

export type TransactionAvgAggregateOutputType = {
  amount: number | null
}

export type TransactionSumAggregateOutputType = {
  amount: number | null
}

export type TransactionMinAggregateOutputType = {
  id: string | null
  walletId: string | null
  type: string | null
  amount: number | null
  currency: $Enums.Currency | null
  createdAt: Date | null
}

export type TransactionMaxAggregateOutputType = {
  id: string | null
  walletId: string | null
  type: string | null
  amount: number | null
  currency: $Enums.Currency | null
  createdAt: Date | null
}

export type TransactionCountAggregateOutputType = {
  id: number
  walletId: number
  type: number
  amount: number
  currency: number
  meta: number
  createdAt: number
  _all: number
}


export type TransactionAvgAggregateInputType = {
  amount?: true
}

export type TransactionSumAggregateInputType = {
  amount?: true
}

export type TransactionMinAggregateInputType = {
  id?: true
  walletId?: true
  type?: true
  amount?: true
  currency?: true
  createdAt?: true
}

export type TransactionMaxAggregateInputType = {
  id?: true
  walletId?: true
  type?: true
  amount?: true
  currency?: true
  createdAt?: true
}

export type TransactionCountAggregateInputType = {
  id?: true
  walletId?: true
  type?: true
  amount?: true
  currency?: true
  meta?: true
  createdAt?: true
  _all?: true
}

export type TransactionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Transaction to aggregate.
   */
  where?: Prisma.TransactionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Transactions to fetch.
   */
  orderBy?: Prisma.TransactionOrderByWithRelationInput | Prisma.TransactionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TransactionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Transactions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Transactions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Transactions
  **/
  _count?: true | TransactionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: TransactionAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: TransactionSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TransactionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TransactionMaxAggregateInputType
}

export type GetTransactionAggregateType<T extends TransactionAggregateArgs> = {
      [P in keyof T & keyof AggregateTransaction]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTransaction[P]>
    : Prisma.GetScalarType<T[P], AggregateTransaction[P]>
}




export type TransactionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TransactionWhereInput
  orderBy?: Prisma.TransactionOrderByWithAggregationInput | Prisma.TransactionOrderByWithAggregationInput[]
  by: Prisma.TransactionScalarFieldEnum[] | Prisma.TransactionScalarFieldEnum
  having?: Prisma.TransactionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TransactionCountAggregateInputType | true
  _avg?: TransactionAvgAggregateInputType
  _sum?: TransactionSumAggregateInputType
  _min?: TransactionMinAggregateInputType
  _max?: TransactionMaxAggregateInputType
}

export type TransactionGroupByOutputType = {
  id: string
  walletId: string
  type: string
  amount: number
  currency: $Enums.Currency
  meta: runtime.JsonValue | null
  createdAt: Date
  _count: TransactionCountAggregateOutputType | null
  _avg: TransactionAvgAggregateOutputType | null
  _sum: TransactionSumAggregateOutputType | null
  _min: TransactionMinAggregateOutputType | null
  _max: TransactionMaxAggregateOutputType | null
}

type GetTransactionGroupByPayload<T extends TransactionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TransactionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TransactionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TransactionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TransactionGroupByOutputType[P]>
      }
    >
  >



export type TransactionWhereInput = {
  AND?: Prisma.TransactionWhereInput | Prisma.TransactionWhereInput[]
  OR?: Prisma.TransactionWhereInput[]
  NOT?: Prisma.TransactionWhereInput | Prisma.TransactionWhereInput[]
  id?: Prisma.StringFilter<"Transaction"> | string
  walletId?: Prisma.StringFilter<"Transaction"> | string
  type?: Prisma.StringFilter<"Transaction"> | string
  amount?: Prisma.FloatFilter<"Transaction"> | number
  currency?: Prisma.EnumCurrencyFilter<"Transaction"> | $Enums.Currency
  meta?: Prisma.JsonNullableFilter<"Transaction">
  createdAt?: Prisma.DateTimeFilter<"Transaction"> | Date | string
  wallet?: Prisma.XOR<Prisma.WalletScalarRelationFilter, Prisma.WalletWhereInput>
}

export type TransactionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  walletId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  meta?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  wallet?: Prisma.WalletOrderByWithRelationInput
}

export type TransactionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.TransactionWhereInput | Prisma.TransactionWhereInput[]
  OR?: Prisma.TransactionWhereInput[]
  NOT?: Prisma.TransactionWhereInput | Prisma.TransactionWhereInput[]
  walletId?: Prisma.StringFilter<"Transaction"> | string
  type?: Prisma.StringFilter<"Transaction"> | string
  amount?: Prisma.FloatFilter<"Transaction"> | number
  currency?: Prisma.EnumCurrencyFilter<"Transaction"> | $Enums.Currency
  meta?: Prisma.JsonNullableFilter<"Transaction">
  createdAt?: Prisma.DateTimeFilter<"Transaction"> | Date | string
  wallet?: Prisma.XOR<Prisma.WalletScalarRelationFilter, Prisma.WalletWhereInput>
}, "id">

export type TransactionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  walletId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  meta?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.TransactionCountOrderByAggregateInput
  _avg?: Prisma.TransactionAvgOrderByAggregateInput
  _max?: Prisma.TransactionMaxOrderByAggregateInput
  _min?: Prisma.TransactionMinOrderByAggregateInput
  _sum?: Prisma.TransactionSumOrderByAggregateInput
}

export type TransactionScalarWhereWithAggregatesInput = {
  AND?: Prisma.TransactionScalarWhereWithAggregatesInput | Prisma.TransactionScalarWhereWithAggregatesInput[]
  OR?: Prisma.TransactionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TransactionScalarWhereWithAggregatesInput | Prisma.TransactionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Transaction"> | string
  walletId?: Prisma.StringWithAggregatesFilter<"Transaction"> | string
  type?: Prisma.StringWithAggregatesFilter<"Transaction"> | string
  amount?: Prisma.FloatWithAggregatesFilter<"Transaction"> | number
  currency?: Prisma.EnumCurrencyWithAggregatesFilter<"Transaction"> | $Enums.Currency
  meta?: Prisma.JsonNullableWithAggregatesFilter<"Transaction">
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Transaction"> | Date | string
}

export type TransactionCreateInput = {
  id?: string
  type: string
  amount: number
  currency?: $Enums.Currency
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  wallet: Prisma.WalletCreateNestedOneWithoutTransactionsInput
}

export type TransactionUncheckedCreateInput = {
  id?: string
  walletId: string
  type: string
  amount: number
  currency?: $Enums.Currency
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
}

export type TransactionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  wallet?: Prisma.WalletUpdateOneRequiredWithoutTransactionsNestedInput
}

export type TransactionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  walletId?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TransactionCreateManyInput = {
  id?: string
  walletId: string
  type: string
  amount: number
  currency?: $Enums.Currency
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
}

export type TransactionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TransactionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  walletId?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TransactionListRelationFilter = {
  every?: Prisma.TransactionWhereInput
  some?: Prisma.TransactionWhereInput
  none?: Prisma.TransactionWhereInput
}

export type TransactionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TransactionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  walletId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  meta?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type TransactionAvgOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type TransactionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  walletId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type TransactionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  walletId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type TransactionSumOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type TransactionCreateNestedManyWithoutWalletInput = {
  create?: Prisma.XOR<Prisma.TransactionCreateWithoutWalletInput, Prisma.TransactionUncheckedCreateWithoutWalletInput> | Prisma.TransactionCreateWithoutWalletInput[] | Prisma.TransactionUncheckedCreateWithoutWalletInput[]
  connectOrCreate?: Prisma.TransactionCreateOrConnectWithoutWalletInput | Prisma.TransactionCreateOrConnectWithoutWalletInput[]
  createMany?: Prisma.TransactionCreateManyWalletInputEnvelope
  connect?: Prisma.TransactionWhereUniqueInput | Prisma.TransactionWhereUniqueInput[]
}

export type TransactionUncheckedCreateNestedManyWithoutWalletInput = {
  create?: Prisma.XOR<Prisma.TransactionCreateWithoutWalletInput, Prisma.TransactionUncheckedCreateWithoutWalletInput> | Prisma.TransactionCreateWithoutWalletInput[] | Prisma.TransactionUncheckedCreateWithoutWalletInput[]
  connectOrCreate?: Prisma.TransactionCreateOrConnectWithoutWalletInput | Prisma.TransactionCreateOrConnectWithoutWalletInput[]
  createMany?: Prisma.TransactionCreateManyWalletInputEnvelope
  connect?: Prisma.TransactionWhereUniqueInput | Prisma.TransactionWhereUniqueInput[]
}

export type TransactionUpdateManyWithoutWalletNestedInput = {
  create?: Prisma.XOR<Prisma.TransactionCreateWithoutWalletInput, Prisma.TransactionUncheckedCreateWithoutWalletInput> | Prisma.TransactionCreateWithoutWalletInput[] | Prisma.TransactionUncheckedCreateWithoutWalletInput[]
  connectOrCreate?: Prisma.TransactionCreateOrConnectWithoutWalletInput | Prisma.TransactionCreateOrConnectWithoutWalletInput[]
  upsert?: Prisma.TransactionUpsertWithWhereUniqueWithoutWalletInput | Prisma.TransactionUpsertWithWhereUniqueWithoutWalletInput[]
  createMany?: Prisma.TransactionCreateManyWalletInputEnvelope
  set?: Prisma.TransactionWhereUniqueInput | Prisma.TransactionWhereUniqueInput[]
  disconnect?: Prisma.TransactionWhereUniqueInput | Prisma.TransactionWhereUniqueInput[]
  delete?: Prisma.TransactionWhereUniqueInput | Prisma.TransactionWhereUniqueInput[]
  connect?: Prisma.TransactionWhereUniqueInput | Prisma.TransactionWhereUniqueInput[]
  update?: Prisma.TransactionUpdateWithWhereUniqueWithoutWalletInput | Prisma.TransactionUpdateWithWhereUniqueWithoutWalletInput[]
  updateMany?: Prisma.TransactionUpdateManyWithWhereWithoutWalletInput | Prisma.TransactionUpdateManyWithWhereWithoutWalletInput[]
  deleteMany?: Prisma.TransactionScalarWhereInput | Prisma.TransactionScalarWhereInput[]
}

export type TransactionUncheckedUpdateManyWithoutWalletNestedInput = {
  create?: Prisma.XOR<Prisma.TransactionCreateWithoutWalletInput, Prisma.TransactionUncheckedCreateWithoutWalletInput> | Prisma.TransactionCreateWithoutWalletInput[] | Prisma.TransactionUncheckedCreateWithoutWalletInput[]
  connectOrCreate?: Prisma.TransactionCreateOrConnectWithoutWalletInput | Prisma.TransactionCreateOrConnectWithoutWalletInput[]
  upsert?: Prisma.TransactionUpsertWithWhereUniqueWithoutWalletInput | Prisma.TransactionUpsertWithWhereUniqueWithoutWalletInput[]
  createMany?: Prisma.TransactionCreateManyWalletInputEnvelope
  set?: Prisma.TransactionWhereUniqueInput | Prisma.TransactionWhereUniqueInput[]
  disconnect?: Prisma.TransactionWhereUniqueInput | Prisma.TransactionWhereUniqueInput[]
  delete?: Prisma.TransactionWhereUniqueInput | Prisma.TransactionWhereUniqueInput[]
  connect?: Prisma.TransactionWhereUniqueInput | Prisma.TransactionWhereUniqueInput[]
  update?: Prisma.TransactionUpdateWithWhereUniqueWithoutWalletInput | Prisma.TransactionUpdateWithWhereUniqueWithoutWalletInput[]
  updateMany?: Prisma.TransactionUpdateManyWithWhereWithoutWalletInput | Prisma.TransactionUpdateManyWithWhereWithoutWalletInput[]
  deleteMany?: Prisma.TransactionScalarWhereInput | Prisma.TransactionScalarWhereInput[]
}

export type TransactionCreateWithoutWalletInput = {
  id?: string
  type: string
  amount: number
  currency?: $Enums.Currency
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
}

export type TransactionUncheckedCreateWithoutWalletInput = {
  id?: string
  type: string
  amount: number
  currency?: $Enums.Currency
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
}

export type TransactionCreateOrConnectWithoutWalletInput = {
  where: Prisma.TransactionWhereUniqueInput
  create: Prisma.XOR<Prisma.TransactionCreateWithoutWalletInput, Prisma.TransactionUncheckedCreateWithoutWalletInput>
}

export type TransactionCreateManyWalletInputEnvelope = {
  data: Prisma.TransactionCreateManyWalletInput | Prisma.TransactionCreateManyWalletInput[]
  skipDuplicates?: boolean
}

export type TransactionUpsertWithWhereUniqueWithoutWalletInput = {
  where: Prisma.TransactionWhereUniqueInput
  update: Prisma.XOR<Prisma.TransactionUpdateWithoutWalletInput, Prisma.TransactionUncheckedUpdateWithoutWalletInput>
  create: Prisma.XOR<Prisma.TransactionCreateWithoutWalletInput, Prisma.TransactionUncheckedCreateWithoutWalletInput>
}

export type TransactionUpdateWithWhereUniqueWithoutWalletInput = {
  where: Prisma.TransactionWhereUniqueInput
  data: Prisma.XOR<Prisma.TransactionUpdateWithoutWalletInput, Prisma.TransactionUncheckedUpdateWithoutWalletInput>
}

export type TransactionUpdateManyWithWhereWithoutWalletInput = {
  where: Prisma.TransactionScalarWhereInput
  data: Prisma.XOR<Prisma.TransactionUpdateManyMutationInput, Prisma.TransactionUncheckedUpdateManyWithoutWalletInput>
}

export type TransactionScalarWhereInput = {
  AND?: Prisma.TransactionScalarWhereInput | Prisma.TransactionScalarWhereInput[]
  OR?: Prisma.TransactionScalarWhereInput[]
  NOT?: Prisma.TransactionScalarWhereInput | Prisma.TransactionScalarWhereInput[]
  id?: Prisma.StringFilter<"Transaction"> | string
  walletId?: Prisma.StringFilter<"Transaction"> | string
  type?: Prisma.StringFilter<"Transaction"> | string
  amount?: Prisma.FloatFilter<"Transaction"> | number
  currency?: Prisma.EnumCurrencyFilter<"Transaction"> | $Enums.Currency
  meta?: Prisma.JsonNullableFilter<"Transaction">
  createdAt?: Prisma.DateTimeFilter<"Transaction"> | Date | string
}

export type TransactionCreateManyWalletInput = {
  id?: string
  type: string
  amount: number
  currency?: $Enums.Currency
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
}

export type TransactionUpdateWithoutWalletInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TransactionUncheckedUpdateWithoutWalletInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TransactionUncheckedUpdateManyWithoutWalletInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type TransactionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  walletId?: boolean
  type?: boolean
  amount?: boolean
  currency?: boolean
  meta?: boolean
  createdAt?: boolean
  wallet?: boolean | Prisma.WalletDefaultArgs<ExtArgs>
}, ExtArgs["result"]["transaction"]>

export type TransactionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  walletId?: boolean
  type?: boolean
  amount?: boolean
  currency?: boolean
  meta?: boolean
  createdAt?: boolean
  wallet?: boolean | Prisma.WalletDefaultArgs<ExtArgs>
}, ExtArgs["result"]["transaction"]>

export type TransactionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  walletId?: boolean
  type?: boolean
  amount?: boolean
  currency?: boolean
  meta?: boolean
  createdAt?: boolean
  wallet?: boolean | Prisma.WalletDefaultArgs<ExtArgs>
}, ExtArgs["result"]["transaction"]>

export type TransactionSelectScalar = {
  id?: boolean
  walletId?: boolean
  type?: boolean
  amount?: boolean
  currency?: boolean
  meta?: boolean
  createdAt?: boolean
}

export type TransactionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "walletId" | "type" | "amount" | "currency" | "meta" | "createdAt", ExtArgs["result"]["transaction"]>
export type TransactionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  wallet?: boolean | Prisma.WalletDefaultArgs<ExtArgs>
}
export type TransactionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  wallet?: boolean | Prisma.WalletDefaultArgs<ExtArgs>
}
export type TransactionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  wallet?: boolean | Prisma.WalletDefaultArgs<ExtArgs>
}

export type $TransactionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Transaction"
  objects: {
    wallet: Prisma.$WalletPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    walletId: string
    type: string
    amount: number
    currency: $Enums.Currency
    meta: runtime.JsonValue | null
    createdAt: Date
  }, ExtArgs["result"]["transaction"]>
  composites: {}
}

export type TransactionGetPayload<S extends boolean | null | undefined | TransactionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TransactionPayload, S>

export type TransactionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TransactionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TransactionCountAggregateInputType | true
  }

export interface TransactionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Transaction'], meta: { name: 'Transaction' } }
  /**
   * Find zero or one Transaction that matches the filter.
   * @param {TransactionFindUniqueArgs} args - Arguments to find a Transaction
   * @example
   * // Get one Transaction
   * const transaction = await prisma.transaction.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TransactionFindUniqueArgs>(args: Prisma.SelectSubset<T, TransactionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TransactionClient<runtime.Types.Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Transaction that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TransactionFindUniqueOrThrowArgs} args - Arguments to find a Transaction
   * @example
   * // Get one Transaction
   * const transaction = await prisma.transaction.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TransactionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TransactionClient<runtime.Types.Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Transaction that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransactionFindFirstArgs} args - Arguments to find a Transaction
   * @example
   * // Get one Transaction
   * const transaction = await prisma.transaction.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TransactionFindFirstArgs>(args?: Prisma.SelectSubset<T, TransactionFindFirstArgs<ExtArgs>>): Prisma.Prisma__TransactionClient<runtime.Types.Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Transaction that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransactionFindFirstOrThrowArgs} args - Arguments to find a Transaction
   * @example
   * // Get one Transaction
   * const transaction = await prisma.transaction.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TransactionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TransactionClient<runtime.Types.Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Transactions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransactionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Transactions
   * const transactions = await prisma.transaction.findMany()
   * 
   * // Get first 10 Transactions
   * const transactions = await prisma.transaction.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const transactionWithIdOnly = await prisma.transaction.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TransactionFindManyArgs>(args?: Prisma.SelectSubset<T, TransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Transaction.
   * @param {TransactionCreateArgs} args - Arguments to create a Transaction.
   * @example
   * // Create one Transaction
   * const Transaction = await prisma.transaction.create({
   *   data: {
   *     // ... data to create a Transaction
   *   }
   * })
   * 
   */
  create<T extends TransactionCreateArgs>(args: Prisma.SelectSubset<T, TransactionCreateArgs<ExtArgs>>): Prisma.Prisma__TransactionClient<runtime.Types.Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Transactions.
   * @param {TransactionCreateManyArgs} args - Arguments to create many Transactions.
   * @example
   * // Create many Transactions
   * const transaction = await prisma.transaction.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TransactionCreateManyArgs>(args?: Prisma.SelectSubset<T, TransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Transactions and returns the data saved in the database.
   * @param {TransactionCreateManyAndReturnArgs} args - Arguments to create many Transactions.
   * @example
   * // Create many Transactions
   * const transaction = await prisma.transaction.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Transactions and only return the `id`
   * const transactionWithIdOnly = await prisma.transaction.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TransactionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Transaction.
   * @param {TransactionDeleteArgs} args - Arguments to delete one Transaction.
   * @example
   * // Delete one Transaction
   * const Transaction = await prisma.transaction.delete({
   *   where: {
   *     // ... filter to delete one Transaction
   *   }
   * })
   * 
   */
  delete<T extends TransactionDeleteArgs>(args: Prisma.SelectSubset<T, TransactionDeleteArgs<ExtArgs>>): Prisma.Prisma__TransactionClient<runtime.Types.Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Transaction.
   * @param {TransactionUpdateArgs} args - Arguments to update one Transaction.
   * @example
   * // Update one Transaction
   * const transaction = await prisma.transaction.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TransactionUpdateArgs>(args: Prisma.SelectSubset<T, TransactionUpdateArgs<ExtArgs>>): Prisma.Prisma__TransactionClient<runtime.Types.Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Transactions.
   * @param {TransactionDeleteManyArgs} args - Arguments to filter Transactions to delete.
   * @example
   * // Delete a few Transactions
   * const { count } = await prisma.transaction.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TransactionDeleteManyArgs>(args?: Prisma.SelectSubset<T, TransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Transactions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransactionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Transactions
   * const transaction = await prisma.transaction.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TransactionUpdateManyArgs>(args: Prisma.SelectSubset<T, TransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Transactions and returns the data updated in the database.
   * @param {TransactionUpdateManyAndReturnArgs} args - Arguments to update many Transactions.
   * @example
   * // Update many Transactions
   * const transaction = await prisma.transaction.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Transactions and only return the `id`
   * const transactionWithIdOnly = await prisma.transaction.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TransactionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TransactionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Transaction.
   * @param {TransactionUpsertArgs} args - Arguments to update or create a Transaction.
   * @example
   * // Update or create a Transaction
   * const transaction = await prisma.transaction.upsert({
   *   create: {
   *     // ... data to create a Transaction
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Transaction we want to update
   *   }
   * })
   */
  upsert<T extends TransactionUpsertArgs>(args: Prisma.SelectSubset<T, TransactionUpsertArgs<ExtArgs>>): Prisma.Prisma__TransactionClient<runtime.Types.Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Transactions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransactionCountArgs} args - Arguments to filter Transactions to count.
   * @example
   * // Count the number of Transactions
   * const count = await prisma.transaction.count({
   *   where: {
   *     // ... the filter for the Transactions we want to count
   *   }
   * })
  **/
  count<T extends TransactionCountArgs>(
    args?: Prisma.Subset<T, TransactionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TransactionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Transaction.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TransactionAggregateArgs>(args: Prisma.Subset<T, TransactionAggregateArgs>): Prisma.PrismaPromise<GetTransactionAggregateType<T>>

  /**
   * Group by Transaction.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransactionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TransactionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TransactionGroupByArgs['orderBy'] }
      : { orderBy?: TransactionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Transaction model
 */
readonly fields: TransactionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Transaction.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TransactionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  wallet<T extends Prisma.WalletDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.WalletDefaultArgs<ExtArgs>>): Prisma.Prisma__WalletClient<runtime.Types.Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Transaction model
 */
export interface TransactionFieldRefs {
  readonly id: Prisma.FieldRef<"Transaction", 'String'>
  readonly walletId: Prisma.FieldRef<"Transaction", 'String'>
  readonly type: Prisma.FieldRef<"Transaction", 'String'>
  readonly amount: Prisma.FieldRef<"Transaction", 'Float'>
  readonly currency: Prisma.FieldRef<"Transaction", 'Currency'>
  readonly meta: Prisma.FieldRef<"Transaction", 'Json'>
  readonly createdAt: Prisma.FieldRef<"Transaction", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Transaction findUnique
 */
export type TransactionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transaction
   */
  select?: Prisma.TransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Transaction
   */
  omit?: Prisma.TransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionInclude<ExtArgs> | null
  /**
   * Filter, which Transaction to fetch.
   */
  where: Prisma.TransactionWhereUniqueInput
}

/**
 * Transaction findUniqueOrThrow
 */
export type TransactionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transaction
   */
  select?: Prisma.TransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Transaction
   */
  omit?: Prisma.TransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionInclude<ExtArgs> | null
  /**
   * Filter, which Transaction to fetch.
   */
  where: Prisma.TransactionWhereUniqueInput
}

/**
 * Transaction findFirst
 */
export type TransactionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transaction
   */
  select?: Prisma.TransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Transaction
   */
  omit?: Prisma.TransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionInclude<ExtArgs> | null
  /**
   * Filter, which Transaction to fetch.
   */
  where?: Prisma.TransactionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Transactions to fetch.
   */
  orderBy?: Prisma.TransactionOrderByWithRelationInput | Prisma.TransactionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Transactions.
   */
  cursor?: Prisma.TransactionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Transactions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Transactions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Transactions.
   */
  distinct?: Prisma.TransactionScalarFieldEnum | Prisma.TransactionScalarFieldEnum[]
}

/**
 * Transaction findFirstOrThrow
 */
export type TransactionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transaction
   */
  select?: Prisma.TransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Transaction
   */
  omit?: Prisma.TransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionInclude<ExtArgs> | null
  /**
   * Filter, which Transaction to fetch.
   */
  where?: Prisma.TransactionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Transactions to fetch.
   */
  orderBy?: Prisma.TransactionOrderByWithRelationInput | Prisma.TransactionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Transactions.
   */
  cursor?: Prisma.TransactionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Transactions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Transactions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Transactions.
   */
  distinct?: Prisma.TransactionScalarFieldEnum | Prisma.TransactionScalarFieldEnum[]
}

/**
 * Transaction findMany
 */
export type TransactionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transaction
   */
  select?: Prisma.TransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Transaction
   */
  omit?: Prisma.TransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionInclude<ExtArgs> | null
  /**
   * Filter, which Transactions to fetch.
   */
  where?: Prisma.TransactionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Transactions to fetch.
   */
  orderBy?: Prisma.TransactionOrderByWithRelationInput | Prisma.TransactionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Transactions.
   */
  cursor?: Prisma.TransactionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Transactions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Transactions.
   */
  skip?: number
  distinct?: Prisma.TransactionScalarFieldEnum | Prisma.TransactionScalarFieldEnum[]
}

/**
 * Transaction create
 */
export type TransactionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transaction
   */
  select?: Prisma.TransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Transaction
   */
  omit?: Prisma.TransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionInclude<ExtArgs> | null
  /**
   * The data needed to create a Transaction.
   */
  data: Prisma.XOR<Prisma.TransactionCreateInput, Prisma.TransactionUncheckedCreateInput>
}

/**
 * Transaction createMany
 */
export type TransactionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Transactions.
   */
  data: Prisma.TransactionCreateManyInput | Prisma.TransactionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Transaction createManyAndReturn
 */
export type TransactionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transaction
   */
  select?: Prisma.TransactionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Transaction
   */
  omit?: Prisma.TransactionOmit<ExtArgs> | null
  /**
   * The data used to create many Transactions.
   */
  data: Prisma.TransactionCreateManyInput | Prisma.TransactionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Transaction update
 */
export type TransactionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transaction
   */
  select?: Prisma.TransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Transaction
   */
  omit?: Prisma.TransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionInclude<ExtArgs> | null
  /**
   * The data needed to update a Transaction.
   */
  data: Prisma.XOR<Prisma.TransactionUpdateInput, Prisma.TransactionUncheckedUpdateInput>
  /**
   * Choose, which Transaction to update.
   */
  where: Prisma.TransactionWhereUniqueInput
}

/**
 * Transaction updateMany
 */
export type TransactionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Transactions.
   */
  data: Prisma.XOR<Prisma.TransactionUpdateManyMutationInput, Prisma.TransactionUncheckedUpdateManyInput>
  /**
   * Filter which Transactions to update
   */
  where?: Prisma.TransactionWhereInput
  /**
   * Limit how many Transactions to update.
   */
  limit?: number
}

/**
 * Transaction updateManyAndReturn
 */
export type TransactionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transaction
   */
  select?: Prisma.TransactionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Transaction
   */
  omit?: Prisma.TransactionOmit<ExtArgs> | null
  /**
   * The data used to update Transactions.
   */
  data: Prisma.XOR<Prisma.TransactionUpdateManyMutationInput, Prisma.TransactionUncheckedUpdateManyInput>
  /**
   * Filter which Transactions to update
   */
  where?: Prisma.TransactionWhereInput
  /**
   * Limit how many Transactions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Transaction upsert
 */
export type TransactionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transaction
   */
  select?: Prisma.TransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Transaction
   */
  omit?: Prisma.TransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionInclude<ExtArgs> | null
  /**
   * The filter to search for the Transaction to update in case it exists.
   */
  where: Prisma.TransactionWhereUniqueInput
  /**
   * In case the Transaction found by the `where` argument doesn't exist, create a new Transaction with this data.
   */
  create: Prisma.XOR<Prisma.TransactionCreateInput, Prisma.TransactionUncheckedCreateInput>
  /**
   * In case the Transaction was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TransactionUpdateInput, Prisma.TransactionUncheckedUpdateInput>
}

/**
 * Transaction delete
 */
export type TransactionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transaction
   */
  select?: Prisma.TransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Transaction
   */
  omit?: Prisma.TransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionInclude<ExtArgs> | null
  /**
   * Filter which Transaction to delete.
   */
  where: Prisma.TransactionWhereUniqueInput
}

/**
 * Transaction deleteMany
 */
export type TransactionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Transactions to delete
   */
  where?: Prisma.TransactionWhereInput
  /**
   * Limit how many Transactions to delete.
   */
  limit?: number
}

/**
 * Transaction without action
 */
export type TransactionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transaction
   */
  select?: Prisma.TransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Transaction
   */
  omit?: Prisma.TransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionInclude<ExtArgs> | null
}
