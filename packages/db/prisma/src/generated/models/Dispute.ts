
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Dispute` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Dispute
 * 
 */
export type DisputeModel = runtime.Types.Result.DefaultSelection<Prisma.$DisputePayload>

export type AggregateDispute = {
  _count: DisputeCountAggregateOutputType | null
  _min: DisputeMinAggregateOutputType | null
  _max: DisputeMaxAggregateOutputType | null
}

export type DisputeMinAggregateOutputType = {
  id: string | null
  contractId: string | null
  raisedBy: string | null
  reason: string | null
  status: string | null
  resolution: string | null
  createdAt: Date | null
}

export type DisputeMaxAggregateOutputType = {
  id: string | null
  contractId: string | null
  raisedBy: string | null
  reason: string | null
  status: string | null
  resolution: string | null
  createdAt: Date | null
}

export type DisputeCountAggregateOutputType = {
  id: number
  contractId: number
  raisedBy: number
  reason: number
  status: number
  resolution: number
  createdAt: number
  _all: number
}


export type DisputeMinAggregateInputType = {
  id?: true
  contractId?: true
  raisedBy?: true
  reason?: true
  status?: true
  resolution?: true
  createdAt?: true
}

export type DisputeMaxAggregateInputType = {
  id?: true
  contractId?: true
  raisedBy?: true
  reason?: true
  status?: true
  resolution?: true
  createdAt?: true
}

export type DisputeCountAggregateInputType = {
  id?: true
  contractId?: true
  raisedBy?: true
  reason?: true
  status?: true
  resolution?: true
  createdAt?: true
  _all?: true
}

export type DisputeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Dispute to aggregate.
   */
  where?: Prisma.DisputeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Disputes to fetch.
   */
  orderBy?: Prisma.DisputeOrderByWithRelationInput | Prisma.DisputeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DisputeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Disputes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Disputes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Disputes
  **/
  _count?: true | DisputeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DisputeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DisputeMaxAggregateInputType
}

export type GetDisputeAggregateType<T extends DisputeAggregateArgs> = {
      [P in keyof T & keyof AggregateDispute]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDispute[P]>
    : Prisma.GetScalarType<T[P], AggregateDispute[P]>
}




export type DisputeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DisputeWhereInput
  orderBy?: Prisma.DisputeOrderByWithAggregationInput | Prisma.DisputeOrderByWithAggregationInput[]
  by: Prisma.DisputeScalarFieldEnum[] | Prisma.DisputeScalarFieldEnum
  having?: Prisma.DisputeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DisputeCountAggregateInputType | true
  _min?: DisputeMinAggregateInputType
  _max?: DisputeMaxAggregateInputType
}

export type DisputeGroupByOutputType = {
  id: string
  contractId: string | null
  raisedBy: string
  reason: string
  status: string
  resolution: string | null
  createdAt: Date
  _count: DisputeCountAggregateOutputType | null
  _min: DisputeMinAggregateOutputType | null
  _max: DisputeMaxAggregateOutputType | null
}

type GetDisputeGroupByPayload<T extends DisputeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DisputeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DisputeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DisputeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DisputeGroupByOutputType[P]>
      }
    >
  >



export type DisputeWhereInput = {
  AND?: Prisma.DisputeWhereInput | Prisma.DisputeWhereInput[]
  OR?: Prisma.DisputeWhereInput[]
  NOT?: Prisma.DisputeWhereInput | Prisma.DisputeWhereInput[]
  id?: Prisma.StringFilter<"Dispute"> | string
  contractId?: Prisma.StringNullableFilter<"Dispute"> | string | null
  raisedBy?: Prisma.StringFilter<"Dispute"> | string
  reason?: Prisma.StringFilter<"Dispute"> | string
  status?: Prisma.StringFilter<"Dispute"> | string
  resolution?: Prisma.StringNullableFilter<"Dispute"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Dispute"> | Date | string
  contract?: Prisma.XOR<Prisma.ContractNullableScalarRelationFilter, Prisma.ContractWhereInput> | null
}

export type DisputeOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  contractId?: Prisma.SortOrderInput | Prisma.SortOrder
  raisedBy?: Prisma.SortOrder
  reason?: Prisma.SortOrder
  status?: Prisma.SortOrder
  resolution?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  contract?: Prisma.ContractOrderByWithRelationInput
}

export type DisputeWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  contractId?: string
  AND?: Prisma.DisputeWhereInput | Prisma.DisputeWhereInput[]
  OR?: Prisma.DisputeWhereInput[]
  NOT?: Prisma.DisputeWhereInput | Prisma.DisputeWhereInput[]
  raisedBy?: Prisma.StringFilter<"Dispute"> | string
  reason?: Prisma.StringFilter<"Dispute"> | string
  status?: Prisma.StringFilter<"Dispute"> | string
  resolution?: Prisma.StringNullableFilter<"Dispute"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Dispute"> | Date | string
  contract?: Prisma.XOR<Prisma.ContractNullableScalarRelationFilter, Prisma.ContractWhereInput> | null
}, "id" | "contractId">

export type DisputeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  contractId?: Prisma.SortOrderInput | Prisma.SortOrder
  raisedBy?: Prisma.SortOrder
  reason?: Prisma.SortOrder
  status?: Prisma.SortOrder
  resolution?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.DisputeCountOrderByAggregateInput
  _max?: Prisma.DisputeMaxOrderByAggregateInput
  _min?: Prisma.DisputeMinOrderByAggregateInput
}

export type DisputeScalarWhereWithAggregatesInput = {
  AND?: Prisma.DisputeScalarWhereWithAggregatesInput | Prisma.DisputeScalarWhereWithAggregatesInput[]
  OR?: Prisma.DisputeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DisputeScalarWhereWithAggregatesInput | Prisma.DisputeScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Dispute"> | string
  contractId?: Prisma.StringNullableWithAggregatesFilter<"Dispute"> | string | null
  raisedBy?: Prisma.StringWithAggregatesFilter<"Dispute"> | string
  reason?: Prisma.StringWithAggregatesFilter<"Dispute"> | string
  status?: Prisma.StringWithAggregatesFilter<"Dispute"> | string
  resolution?: Prisma.StringNullableWithAggregatesFilter<"Dispute"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Dispute"> | Date | string
}

export type DisputeCreateInput = {
  id?: string
  raisedBy: string
  reason: string
  status?: string
  resolution?: string | null
  createdAt?: Date | string
  contract?: Prisma.ContractCreateNestedOneWithoutDisputeInput
}

export type DisputeUncheckedCreateInput = {
  id?: string
  contractId?: string | null
  raisedBy: string
  reason: string
  status?: string
  resolution?: string | null
  createdAt?: Date | string
}

export type DisputeUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  raisedBy?: Prisma.StringFieldUpdateOperationsInput | string
  reason?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  resolution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  contract?: Prisma.ContractUpdateOneWithoutDisputeNestedInput
}

export type DisputeUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  contractId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  raisedBy?: Prisma.StringFieldUpdateOperationsInput | string
  reason?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  resolution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DisputeCreateManyInput = {
  id?: string
  contractId?: string | null
  raisedBy: string
  reason: string
  status?: string
  resolution?: string | null
  createdAt?: Date | string
}

export type DisputeUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  raisedBy?: Prisma.StringFieldUpdateOperationsInput | string
  reason?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  resolution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DisputeUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  contractId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  raisedBy?: Prisma.StringFieldUpdateOperationsInput | string
  reason?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  resolution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DisputeNullableScalarRelationFilter = {
  is?: Prisma.DisputeWhereInput | null
  isNot?: Prisma.DisputeWhereInput | null
}

export type DisputeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  contractId?: Prisma.SortOrder
  raisedBy?: Prisma.SortOrder
  reason?: Prisma.SortOrder
  status?: Prisma.SortOrder
  resolution?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type DisputeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  contractId?: Prisma.SortOrder
  raisedBy?: Prisma.SortOrder
  reason?: Prisma.SortOrder
  status?: Prisma.SortOrder
  resolution?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type DisputeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  contractId?: Prisma.SortOrder
  raisedBy?: Prisma.SortOrder
  reason?: Prisma.SortOrder
  status?: Prisma.SortOrder
  resolution?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type DisputeCreateNestedOneWithoutContractInput = {
  create?: Prisma.XOR<Prisma.DisputeCreateWithoutContractInput, Prisma.DisputeUncheckedCreateWithoutContractInput>
  connectOrCreate?: Prisma.DisputeCreateOrConnectWithoutContractInput
  connect?: Prisma.DisputeWhereUniqueInput
}

export type DisputeUncheckedCreateNestedOneWithoutContractInput = {
  create?: Prisma.XOR<Prisma.DisputeCreateWithoutContractInput, Prisma.DisputeUncheckedCreateWithoutContractInput>
  connectOrCreate?: Prisma.DisputeCreateOrConnectWithoutContractInput
  connect?: Prisma.DisputeWhereUniqueInput
}

export type DisputeUpdateOneWithoutContractNestedInput = {
  create?: Prisma.XOR<Prisma.DisputeCreateWithoutContractInput, Prisma.DisputeUncheckedCreateWithoutContractInput>
  connectOrCreate?: Prisma.DisputeCreateOrConnectWithoutContractInput
  upsert?: Prisma.DisputeUpsertWithoutContractInput
  disconnect?: Prisma.DisputeWhereInput | boolean
  delete?: Prisma.DisputeWhereInput | boolean
  connect?: Prisma.DisputeWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.DisputeUpdateToOneWithWhereWithoutContractInput, Prisma.DisputeUpdateWithoutContractInput>, Prisma.DisputeUncheckedUpdateWithoutContractInput>
}

export type DisputeUncheckedUpdateOneWithoutContractNestedInput = {
  create?: Prisma.XOR<Prisma.DisputeCreateWithoutContractInput, Prisma.DisputeUncheckedCreateWithoutContractInput>
  connectOrCreate?: Prisma.DisputeCreateOrConnectWithoutContractInput
  upsert?: Prisma.DisputeUpsertWithoutContractInput
  disconnect?: Prisma.DisputeWhereInput | boolean
  delete?: Prisma.DisputeWhereInput | boolean
  connect?: Prisma.DisputeWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.DisputeUpdateToOneWithWhereWithoutContractInput, Prisma.DisputeUpdateWithoutContractInput>, Prisma.DisputeUncheckedUpdateWithoutContractInput>
}

export type DisputeCreateWithoutContractInput = {
  id?: string
  raisedBy: string
  reason: string
  status?: string
  resolution?: string | null
  createdAt?: Date | string
}

export type DisputeUncheckedCreateWithoutContractInput = {
  id?: string
  raisedBy: string
  reason: string
  status?: string
  resolution?: string | null
  createdAt?: Date | string
}

export type DisputeCreateOrConnectWithoutContractInput = {
  where: Prisma.DisputeWhereUniqueInput
  create: Prisma.XOR<Prisma.DisputeCreateWithoutContractInput, Prisma.DisputeUncheckedCreateWithoutContractInput>
}

export type DisputeUpsertWithoutContractInput = {
  update: Prisma.XOR<Prisma.DisputeUpdateWithoutContractInput, Prisma.DisputeUncheckedUpdateWithoutContractInput>
  create: Prisma.XOR<Prisma.DisputeCreateWithoutContractInput, Prisma.DisputeUncheckedCreateWithoutContractInput>
  where?: Prisma.DisputeWhereInput
}

export type DisputeUpdateToOneWithWhereWithoutContractInput = {
  where?: Prisma.DisputeWhereInput
  data: Prisma.XOR<Prisma.DisputeUpdateWithoutContractInput, Prisma.DisputeUncheckedUpdateWithoutContractInput>
}

export type DisputeUpdateWithoutContractInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  raisedBy?: Prisma.StringFieldUpdateOperationsInput | string
  reason?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  resolution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DisputeUncheckedUpdateWithoutContractInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  raisedBy?: Prisma.StringFieldUpdateOperationsInput | string
  reason?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  resolution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type DisputeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  contractId?: boolean
  raisedBy?: boolean
  reason?: boolean
  status?: boolean
  resolution?: boolean
  createdAt?: boolean
  contract?: boolean | Prisma.Dispute$contractArgs<ExtArgs>
}, ExtArgs["result"]["dispute"]>

export type DisputeSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  contractId?: boolean
  raisedBy?: boolean
  reason?: boolean
  status?: boolean
  resolution?: boolean
  createdAt?: boolean
  contract?: boolean | Prisma.Dispute$contractArgs<ExtArgs>
}, ExtArgs["result"]["dispute"]>

export type DisputeSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  contractId?: boolean
  raisedBy?: boolean
  reason?: boolean
  status?: boolean
  resolution?: boolean
  createdAt?: boolean
  contract?: boolean | Prisma.Dispute$contractArgs<ExtArgs>
}, ExtArgs["result"]["dispute"]>

export type DisputeSelectScalar = {
  id?: boolean
  contractId?: boolean
  raisedBy?: boolean
  reason?: boolean
  status?: boolean
  resolution?: boolean
  createdAt?: boolean
}

export type DisputeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "contractId" | "raisedBy" | "reason" | "status" | "resolution" | "createdAt", ExtArgs["result"]["dispute"]>
export type DisputeInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  contract?: boolean | Prisma.Dispute$contractArgs<ExtArgs>
}
export type DisputeIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  contract?: boolean | Prisma.Dispute$contractArgs<ExtArgs>
}
export type DisputeIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  contract?: boolean | Prisma.Dispute$contractArgs<ExtArgs>
}

export type $DisputePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Dispute"
  objects: {
    contract: Prisma.$ContractPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    contractId: string | null
    raisedBy: string
    reason: string
    status: string
    resolution: string | null
    createdAt: Date
  }, ExtArgs["result"]["dispute"]>
  composites: {}
}

export type DisputeGetPayload<S extends boolean | null | undefined | DisputeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DisputePayload, S>

export type DisputeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DisputeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DisputeCountAggregateInputType | true
  }

export interface DisputeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Dispute'], meta: { name: 'Dispute' } }
  /**
   * Find zero or one Dispute that matches the filter.
   * @param {DisputeFindUniqueArgs} args - Arguments to find a Dispute
   * @example
   * // Get one Dispute
   * const dispute = await prisma.dispute.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DisputeFindUniqueArgs>(args: Prisma.SelectSubset<T, DisputeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DisputeClient<runtime.Types.Result.GetResult<Prisma.$DisputePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Dispute that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DisputeFindUniqueOrThrowArgs} args - Arguments to find a Dispute
   * @example
   * // Get one Dispute
   * const dispute = await prisma.dispute.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DisputeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DisputeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DisputeClient<runtime.Types.Result.GetResult<Prisma.$DisputePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Dispute that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DisputeFindFirstArgs} args - Arguments to find a Dispute
   * @example
   * // Get one Dispute
   * const dispute = await prisma.dispute.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DisputeFindFirstArgs>(args?: Prisma.SelectSubset<T, DisputeFindFirstArgs<ExtArgs>>): Prisma.Prisma__DisputeClient<runtime.Types.Result.GetResult<Prisma.$DisputePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Dispute that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DisputeFindFirstOrThrowArgs} args - Arguments to find a Dispute
   * @example
   * // Get one Dispute
   * const dispute = await prisma.dispute.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DisputeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DisputeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DisputeClient<runtime.Types.Result.GetResult<Prisma.$DisputePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Disputes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DisputeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Disputes
   * const disputes = await prisma.dispute.findMany()
   * 
   * // Get first 10 Disputes
   * const disputes = await prisma.dispute.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const disputeWithIdOnly = await prisma.dispute.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends DisputeFindManyArgs>(args?: Prisma.SelectSubset<T, DisputeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DisputePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Dispute.
   * @param {DisputeCreateArgs} args - Arguments to create a Dispute.
   * @example
   * // Create one Dispute
   * const Dispute = await prisma.dispute.create({
   *   data: {
   *     // ... data to create a Dispute
   *   }
   * })
   * 
   */
  create<T extends DisputeCreateArgs>(args: Prisma.SelectSubset<T, DisputeCreateArgs<ExtArgs>>): Prisma.Prisma__DisputeClient<runtime.Types.Result.GetResult<Prisma.$DisputePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Disputes.
   * @param {DisputeCreateManyArgs} args - Arguments to create many Disputes.
   * @example
   * // Create many Disputes
   * const dispute = await prisma.dispute.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends DisputeCreateManyArgs>(args?: Prisma.SelectSubset<T, DisputeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Disputes and returns the data saved in the database.
   * @param {DisputeCreateManyAndReturnArgs} args - Arguments to create many Disputes.
   * @example
   * // Create many Disputes
   * const dispute = await prisma.dispute.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Disputes and only return the `id`
   * const disputeWithIdOnly = await prisma.dispute.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends DisputeCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, DisputeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DisputePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Dispute.
   * @param {DisputeDeleteArgs} args - Arguments to delete one Dispute.
   * @example
   * // Delete one Dispute
   * const Dispute = await prisma.dispute.delete({
   *   where: {
   *     // ... filter to delete one Dispute
   *   }
   * })
   * 
   */
  delete<T extends DisputeDeleteArgs>(args: Prisma.SelectSubset<T, DisputeDeleteArgs<ExtArgs>>): Prisma.Prisma__DisputeClient<runtime.Types.Result.GetResult<Prisma.$DisputePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Dispute.
   * @param {DisputeUpdateArgs} args - Arguments to update one Dispute.
   * @example
   * // Update one Dispute
   * const dispute = await prisma.dispute.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DisputeUpdateArgs>(args: Prisma.SelectSubset<T, DisputeUpdateArgs<ExtArgs>>): Prisma.Prisma__DisputeClient<runtime.Types.Result.GetResult<Prisma.$DisputePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Disputes.
   * @param {DisputeDeleteManyArgs} args - Arguments to filter Disputes to delete.
   * @example
   * // Delete a few Disputes
   * const { count } = await prisma.dispute.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DisputeDeleteManyArgs>(args?: Prisma.SelectSubset<T, DisputeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Disputes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DisputeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Disputes
   * const dispute = await prisma.dispute.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DisputeUpdateManyArgs>(args: Prisma.SelectSubset<T, DisputeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Disputes and returns the data updated in the database.
   * @param {DisputeUpdateManyAndReturnArgs} args - Arguments to update many Disputes.
   * @example
   * // Update many Disputes
   * const dispute = await prisma.dispute.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Disputes and only return the `id`
   * const disputeWithIdOnly = await prisma.dispute.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends DisputeUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, DisputeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DisputePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Dispute.
   * @param {DisputeUpsertArgs} args - Arguments to update or create a Dispute.
   * @example
   * // Update or create a Dispute
   * const dispute = await prisma.dispute.upsert({
   *   create: {
   *     // ... data to create a Dispute
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Dispute we want to update
   *   }
   * })
   */
  upsert<T extends DisputeUpsertArgs>(args: Prisma.SelectSubset<T, DisputeUpsertArgs<ExtArgs>>): Prisma.Prisma__DisputeClient<runtime.Types.Result.GetResult<Prisma.$DisputePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Disputes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DisputeCountArgs} args - Arguments to filter Disputes to count.
   * @example
   * // Count the number of Disputes
   * const count = await prisma.dispute.count({
   *   where: {
   *     // ... the filter for the Disputes we want to count
   *   }
   * })
  **/
  count<T extends DisputeCountArgs>(
    args?: Prisma.Subset<T, DisputeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DisputeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Dispute.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DisputeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DisputeAggregateArgs>(args: Prisma.Subset<T, DisputeAggregateArgs>): Prisma.PrismaPromise<GetDisputeAggregateType<T>>

  /**
   * Group by Dispute.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DisputeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DisputeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DisputeGroupByArgs['orderBy'] }
      : { orderBy?: DisputeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DisputeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDisputeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Dispute model
 */
readonly fields: DisputeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Dispute.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DisputeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  contract<T extends Prisma.Dispute$contractArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Dispute$contractArgs<ExtArgs>>): Prisma.Prisma__ContractClient<runtime.Types.Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Dispute model
 */
export interface DisputeFieldRefs {
  readonly id: Prisma.FieldRef<"Dispute", 'String'>
  readonly contractId: Prisma.FieldRef<"Dispute", 'String'>
  readonly raisedBy: Prisma.FieldRef<"Dispute", 'String'>
  readonly reason: Prisma.FieldRef<"Dispute", 'String'>
  readonly status: Prisma.FieldRef<"Dispute", 'String'>
  readonly resolution: Prisma.FieldRef<"Dispute", 'String'>
  readonly createdAt: Prisma.FieldRef<"Dispute", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Dispute findUnique
 */
export type DisputeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Dispute
   */
  select?: Prisma.DisputeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Dispute
   */
  omit?: Prisma.DisputeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DisputeInclude<ExtArgs> | null
  /**
   * Filter, which Dispute to fetch.
   */
  where: Prisma.DisputeWhereUniqueInput
}

/**
 * Dispute findUniqueOrThrow
 */
export type DisputeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Dispute
   */
  select?: Prisma.DisputeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Dispute
   */
  omit?: Prisma.DisputeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DisputeInclude<ExtArgs> | null
  /**
   * Filter, which Dispute to fetch.
   */
  where: Prisma.DisputeWhereUniqueInput
}

/**
 * Dispute findFirst
 */
export type DisputeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Dispute
   */
  select?: Prisma.DisputeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Dispute
   */
  omit?: Prisma.DisputeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DisputeInclude<ExtArgs> | null
  /**
   * Filter, which Dispute to fetch.
   */
  where?: Prisma.DisputeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Disputes to fetch.
   */
  orderBy?: Prisma.DisputeOrderByWithRelationInput | Prisma.DisputeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Disputes.
   */
  cursor?: Prisma.DisputeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Disputes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Disputes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Disputes.
   */
  distinct?: Prisma.DisputeScalarFieldEnum | Prisma.DisputeScalarFieldEnum[]
}

/**
 * Dispute findFirstOrThrow
 */
export type DisputeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Dispute
   */
  select?: Prisma.DisputeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Dispute
   */
  omit?: Prisma.DisputeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DisputeInclude<ExtArgs> | null
  /**
   * Filter, which Dispute to fetch.
   */
  where?: Prisma.DisputeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Disputes to fetch.
   */
  orderBy?: Prisma.DisputeOrderByWithRelationInput | Prisma.DisputeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Disputes.
   */
  cursor?: Prisma.DisputeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Disputes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Disputes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Disputes.
   */
  distinct?: Prisma.DisputeScalarFieldEnum | Prisma.DisputeScalarFieldEnum[]
}

/**
 * Dispute findMany
 */
export type DisputeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Dispute
   */
  select?: Prisma.DisputeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Dispute
   */
  omit?: Prisma.DisputeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DisputeInclude<ExtArgs> | null
  /**
   * Filter, which Disputes to fetch.
   */
  where?: Prisma.DisputeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Disputes to fetch.
   */
  orderBy?: Prisma.DisputeOrderByWithRelationInput | Prisma.DisputeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Disputes.
   */
  cursor?: Prisma.DisputeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Disputes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Disputes.
   */
  skip?: number
  distinct?: Prisma.DisputeScalarFieldEnum | Prisma.DisputeScalarFieldEnum[]
}

/**
 * Dispute create
 */
export type DisputeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Dispute
   */
  select?: Prisma.DisputeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Dispute
   */
  omit?: Prisma.DisputeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DisputeInclude<ExtArgs> | null
  /**
   * The data needed to create a Dispute.
   */
  data: Prisma.XOR<Prisma.DisputeCreateInput, Prisma.DisputeUncheckedCreateInput>
}

/**
 * Dispute createMany
 */
export type DisputeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Disputes.
   */
  data: Prisma.DisputeCreateManyInput | Prisma.DisputeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Dispute createManyAndReturn
 */
export type DisputeCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Dispute
   */
  select?: Prisma.DisputeSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Dispute
   */
  omit?: Prisma.DisputeOmit<ExtArgs> | null
  /**
   * The data used to create many Disputes.
   */
  data: Prisma.DisputeCreateManyInput | Prisma.DisputeCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DisputeIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Dispute update
 */
export type DisputeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Dispute
   */
  select?: Prisma.DisputeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Dispute
   */
  omit?: Prisma.DisputeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DisputeInclude<ExtArgs> | null
  /**
   * The data needed to update a Dispute.
   */
  data: Prisma.XOR<Prisma.DisputeUpdateInput, Prisma.DisputeUncheckedUpdateInput>
  /**
   * Choose, which Dispute to update.
   */
  where: Prisma.DisputeWhereUniqueInput
}

/**
 * Dispute updateMany
 */
export type DisputeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Disputes.
   */
  data: Prisma.XOR<Prisma.DisputeUpdateManyMutationInput, Prisma.DisputeUncheckedUpdateManyInput>
  /**
   * Filter which Disputes to update
   */
  where?: Prisma.DisputeWhereInput
  /**
   * Limit how many Disputes to update.
   */
  limit?: number
}

/**
 * Dispute updateManyAndReturn
 */
export type DisputeUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Dispute
   */
  select?: Prisma.DisputeSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Dispute
   */
  omit?: Prisma.DisputeOmit<ExtArgs> | null
  /**
   * The data used to update Disputes.
   */
  data: Prisma.XOR<Prisma.DisputeUpdateManyMutationInput, Prisma.DisputeUncheckedUpdateManyInput>
  /**
   * Filter which Disputes to update
   */
  where?: Prisma.DisputeWhereInput
  /**
   * Limit how many Disputes to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DisputeIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Dispute upsert
 */
export type DisputeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Dispute
   */
  select?: Prisma.DisputeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Dispute
   */
  omit?: Prisma.DisputeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DisputeInclude<ExtArgs> | null
  /**
   * The filter to search for the Dispute to update in case it exists.
   */
  where: Prisma.DisputeWhereUniqueInput
  /**
   * In case the Dispute found by the `where` argument doesn't exist, create a new Dispute with this data.
   */
  create: Prisma.XOR<Prisma.DisputeCreateInput, Prisma.DisputeUncheckedCreateInput>
  /**
   * In case the Dispute was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DisputeUpdateInput, Prisma.DisputeUncheckedUpdateInput>
}

/**
 * Dispute delete
 */
export type DisputeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Dispute
   */
  select?: Prisma.DisputeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Dispute
   */
  omit?: Prisma.DisputeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DisputeInclude<ExtArgs> | null
  /**
   * Filter which Dispute to delete.
   */
  where: Prisma.DisputeWhereUniqueInput
}

/**
 * Dispute deleteMany
 */
export type DisputeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Disputes to delete
   */
  where?: Prisma.DisputeWhereInput
  /**
   * Limit how many Disputes to delete.
   */
  limit?: number
}

/**
 * Dispute.contract
 */
export type Dispute$contractArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contract
   */
  select?: Prisma.ContractSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Contract
   */
  omit?: Prisma.ContractOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContractInclude<ExtArgs> | null
  where?: Prisma.ContractWhereInput
}

/**
 * Dispute without action
 */
export type DisputeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Dispute
   */
  select?: Prisma.DisputeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Dispute
   */
  omit?: Prisma.DisputeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DisputeInclude<ExtArgs> | null
}
