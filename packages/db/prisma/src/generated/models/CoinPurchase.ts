
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `CoinPurchase` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model CoinPurchase
 * 
 */
export type CoinPurchaseModel = runtime.Types.Result.DefaultSelection<Prisma.$CoinPurchasePayload>

export type AggregateCoinPurchase = {
  _count: CoinPurchaseCountAggregateOutputType | null
  _avg: CoinPurchaseAvgAggregateOutputType | null
  _sum: CoinPurchaseSumAggregateOutputType | null
  _min: CoinPurchaseMinAggregateOutputType | null
  _max: CoinPurchaseMaxAggregateOutputType | null
}

export type CoinPurchaseAvgAggregateOutputType = {
  coins: number | null
  amount: number | null
}

export type CoinPurchaseSumAggregateOutputType = {
  coins: number | null
  amount: number | null
}

export type CoinPurchaseMinAggregateOutputType = {
  id: string | null
  userId: string | null
  coins: number | null
  amount: number | null
  currency: $Enums.Currency | null
  provider: string | null
  createdAt: Date | null
}

export type CoinPurchaseMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  coins: number | null
  amount: number | null
  currency: $Enums.Currency | null
  provider: string | null
  createdAt: Date | null
}

export type CoinPurchaseCountAggregateOutputType = {
  id: number
  userId: number
  coins: number
  amount: number
  currency: number
  provider: number
  meta: number
  createdAt: number
  _all: number
}


export type CoinPurchaseAvgAggregateInputType = {
  coins?: true
  amount?: true
}

export type CoinPurchaseSumAggregateInputType = {
  coins?: true
  amount?: true
}

export type CoinPurchaseMinAggregateInputType = {
  id?: true
  userId?: true
  coins?: true
  amount?: true
  currency?: true
  provider?: true
  createdAt?: true
}

export type CoinPurchaseMaxAggregateInputType = {
  id?: true
  userId?: true
  coins?: true
  amount?: true
  currency?: true
  provider?: true
  createdAt?: true
}

export type CoinPurchaseCountAggregateInputType = {
  id?: true
  userId?: true
  coins?: true
  amount?: true
  currency?: true
  provider?: true
  meta?: true
  createdAt?: true
  _all?: true
}

export type CoinPurchaseAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CoinPurchase to aggregate.
   */
  where?: Prisma.CoinPurchaseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CoinPurchases to fetch.
   */
  orderBy?: Prisma.CoinPurchaseOrderByWithRelationInput | Prisma.CoinPurchaseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CoinPurchaseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CoinPurchases from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CoinPurchases.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned CoinPurchases
  **/
  _count?: true | CoinPurchaseCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: CoinPurchaseAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: CoinPurchaseSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CoinPurchaseMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CoinPurchaseMaxAggregateInputType
}

export type GetCoinPurchaseAggregateType<T extends CoinPurchaseAggregateArgs> = {
      [P in keyof T & keyof AggregateCoinPurchase]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCoinPurchase[P]>
    : Prisma.GetScalarType<T[P], AggregateCoinPurchase[P]>
}




export type CoinPurchaseGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CoinPurchaseWhereInput
  orderBy?: Prisma.CoinPurchaseOrderByWithAggregationInput | Prisma.CoinPurchaseOrderByWithAggregationInput[]
  by: Prisma.CoinPurchaseScalarFieldEnum[] | Prisma.CoinPurchaseScalarFieldEnum
  having?: Prisma.CoinPurchaseScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CoinPurchaseCountAggregateInputType | true
  _avg?: CoinPurchaseAvgAggregateInputType
  _sum?: CoinPurchaseSumAggregateInputType
  _min?: CoinPurchaseMinAggregateInputType
  _max?: CoinPurchaseMaxAggregateInputType
}

export type CoinPurchaseGroupByOutputType = {
  id: string
  userId: string
  coins: number
  amount: number
  currency: $Enums.Currency
  provider: string | null
  meta: runtime.JsonValue | null
  createdAt: Date
  _count: CoinPurchaseCountAggregateOutputType | null
  _avg: CoinPurchaseAvgAggregateOutputType | null
  _sum: CoinPurchaseSumAggregateOutputType | null
  _min: CoinPurchaseMinAggregateOutputType | null
  _max: CoinPurchaseMaxAggregateOutputType | null
}

type GetCoinPurchaseGroupByPayload<T extends CoinPurchaseGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CoinPurchaseGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CoinPurchaseGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CoinPurchaseGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CoinPurchaseGroupByOutputType[P]>
      }
    >
  >



export type CoinPurchaseWhereInput = {
  AND?: Prisma.CoinPurchaseWhereInput | Prisma.CoinPurchaseWhereInput[]
  OR?: Prisma.CoinPurchaseWhereInput[]
  NOT?: Prisma.CoinPurchaseWhereInput | Prisma.CoinPurchaseWhereInput[]
  id?: Prisma.StringFilter<"CoinPurchase"> | string
  userId?: Prisma.StringFilter<"CoinPurchase"> | string
  coins?: Prisma.IntFilter<"CoinPurchase"> | number
  amount?: Prisma.FloatFilter<"CoinPurchase"> | number
  currency?: Prisma.EnumCurrencyFilter<"CoinPurchase"> | $Enums.Currency
  provider?: Prisma.StringNullableFilter<"CoinPurchase"> | string | null
  meta?: Prisma.JsonNullableFilter<"CoinPurchase">
  createdAt?: Prisma.DateTimeFilter<"CoinPurchase"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type CoinPurchaseOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  coins?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  provider?: Prisma.SortOrderInput | Prisma.SortOrder
  meta?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
}

export type CoinPurchaseWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.CoinPurchaseWhereInput | Prisma.CoinPurchaseWhereInput[]
  OR?: Prisma.CoinPurchaseWhereInput[]
  NOT?: Prisma.CoinPurchaseWhereInput | Prisma.CoinPurchaseWhereInput[]
  userId?: Prisma.StringFilter<"CoinPurchase"> | string
  coins?: Prisma.IntFilter<"CoinPurchase"> | number
  amount?: Prisma.FloatFilter<"CoinPurchase"> | number
  currency?: Prisma.EnumCurrencyFilter<"CoinPurchase"> | $Enums.Currency
  provider?: Prisma.StringNullableFilter<"CoinPurchase"> | string | null
  meta?: Prisma.JsonNullableFilter<"CoinPurchase">
  createdAt?: Prisma.DateTimeFilter<"CoinPurchase"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type CoinPurchaseOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  coins?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  provider?: Prisma.SortOrderInput | Prisma.SortOrder
  meta?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.CoinPurchaseCountOrderByAggregateInput
  _avg?: Prisma.CoinPurchaseAvgOrderByAggregateInput
  _max?: Prisma.CoinPurchaseMaxOrderByAggregateInput
  _min?: Prisma.CoinPurchaseMinOrderByAggregateInput
  _sum?: Prisma.CoinPurchaseSumOrderByAggregateInput
}

export type CoinPurchaseScalarWhereWithAggregatesInput = {
  AND?: Prisma.CoinPurchaseScalarWhereWithAggregatesInput | Prisma.CoinPurchaseScalarWhereWithAggregatesInput[]
  OR?: Prisma.CoinPurchaseScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CoinPurchaseScalarWhereWithAggregatesInput | Prisma.CoinPurchaseScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"CoinPurchase"> | string
  userId?: Prisma.StringWithAggregatesFilter<"CoinPurchase"> | string
  coins?: Prisma.IntWithAggregatesFilter<"CoinPurchase"> | number
  amount?: Prisma.FloatWithAggregatesFilter<"CoinPurchase"> | number
  currency?: Prisma.EnumCurrencyWithAggregatesFilter<"CoinPurchase"> | $Enums.Currency
  provider?: Prisma.StringNullableWithAggregatesFilter<"CoinPurchase"> | string | null
  meta?: Prisma.JsonNullableWithAggregatesFilter<"CoinPurchase">
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"CoinPurchase"> | Date | string
}

export type CoinPurchaseCreateInput = {
  id?: string
  coins: number
  amount: number
  currency?: $Enums.Currency
  provider?: string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutCoinPurchasesInput
}

export type CoinPurchaseUncheckedCreateInput = {
  id?: string
  userId: string
  coins: number
  amount: number
  currency?: $Enums.Currency
  provider?: string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
}

export type CoinPurchaseUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  coins?: Prisma.IntFieldUpdateOperationsInput | number
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
  provider?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutCoinPurchasesNestedInput
}

export type CoinPurchaseUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  coins?: Prisma.IntFieldUpdateOperationsInput | number
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
  provider?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CoinPurchaseCreateManyInput = {
  id?: string
  userId: string
  coins: number
  amount: number
  currency?: $Enums.Currency
  provider?: string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
}

export type CoinPurchaseUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  coins?: Prisma.IntFieldUpdateOperationsInput | number
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
  provider?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CoinPurchaseUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  coins?: Prisma.IntFieldUpdateOperationsInput | number
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
  provider?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CoinPurchaseListRelationFilter = {
  every?: Prisma.CoinPurchaseWhereInput
  some?: Prisma.CoinPurchaseWhereInput
  none?: Prisma.CoinPurchaseWhereInput
}

export type CoinPurchaseOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type CoinPurchaseCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  coins?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  provider?: Prisma.SortOrder
  meta?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type CoinPurchaseAvgOrderByAggregateInput = {
  coins?: Prisma.SortOrder
  amount?: Prisma.SortOrder
}

export type CoinPurchaseMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  coins?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  provider?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type CoinPurchaseMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  coins?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  provider?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type CoinPurchaseSumOrderByAggregateInput = {
  coins?: Prisma.SortOrder
  amount?: Prisma.SortOrder
}

export type CoinPurchaseCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.CoinPurchaseCreateWithoutUserInput, Prisma.CoinPurchaseUncheckedCreateWithoutUserInput> | Prisma.CoinPurchaseCreateWithoutUserInput[] | Prisma.CoinPurchaseUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.CoinPurchaseCreateOrConnectWithoutUserInput | Prisma.CoinPurchaseCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.CoinPurchaseCreateManyUserInputEnvelope
  connect?: Prisma.CoinPurchaseWhereUniqueInput | Prisma.CoinPurchaseWhereUniqueInput[]
}

export type CoinPurchaseUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.CoinPurchaseCreateWithoutUserInput, Prisma.CoinPurchaseUncheckedCreateWithoutUserInput> | Prisma.CoinPurchaseCreateWithoutUserInput[] | Prisma.CoinPurchaseUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.CoinPurchaseCreateOrConnectWithoutUserInput | Prisma.CoinPurchaseCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.CoinPurchaseCreateManyUserInputEnvelope
  connect?: Prisma.CoinPurchaseWhereUniqueInput | Prisma.CoinPurchaseWhereUniqueInput[]
}

export type CoinPurchaseUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.CoinPurchaseCreateWithoutUserInput, Prisma.CoinPurchaseUncheckedCreateWithoutUserInput> | Prisma.CoinPurchaseCreateWithoutUserInput[] | Prisma.CoinPurchaseUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.CoinPurchaseCreateOrConnectWithoutUserInput | Prisma.CoinPurchaseCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.CoinPurchaseUpsertWithWhereUniqueWithoutUserInput | Prisma.CoinPurchaseUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.CoinPurchaseCreateManyUserInputEnvelope
  set?: Prisma.CoinPurchaseWhereUniqueInput | Prisma.CoinPurchaseWhereUniqueInput[]
  disconnect?: Prisma.CoinPurchaseWhereUniqueInput | Prisma.CoinPurchaseWhereUniqueInput[]
  delete?: Prisma.CoinPurchaseWhereUniqueInput | Prisma.CoinPurchaseWhereUniqueInput[]
  connect?: Prisma.CoinPurchaseWhereUniqueInput | Prisma.CoinPurchaseWhereUniqueInput[]
  update?: Prisma.CoinPurchaseUpdateWithWhereUniqueWithoutUserInput | Prisma.CoinPurchaseUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.CoinPurchaseUpdateManyWithWhereWithoutUserInput | Prisma.CoinPurchaseUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.CoinPurchaseScalarWhereInput | Prisma.CoinPurchaseScalarWhereInput[]
}

export type CoinPurchaseUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.CoinPurchaseCreateWithoutUserInput, Prisma.CoinPurchaseUncheckedCreateWithoutUserInput> | Prisma.CoinPurchaseCreateWithoutUserInput[] | Prisma.CoinPurchaseUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.CoinPurchaseCreateOrConnectWithoutUserInput | Prisma.CoinPurchaseCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.CoinPurchaseUpsertWithWhereUniqueWithoutUserInput | Prisma.CoinPurchaseUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.CoinPurchaseCreateManyUserInputEnvelope
  set?: Prisma.CoinPurchaseWhereUniqueInput | Prisma.CoinPurchaseWhereUniqueInput[]
  disconnect?: Prisma.CoinPurchaseWhereUniqueInput | Prisma.CoinPurchaseWhereUniqueInput[]
  delete?: Prisma.CoinPurchaseWhereUniqueInput | Prisma.CoinPurchaseWhereUniqueInput[]
  connect?: Prisma.CoinPurchaseWhereUniqueInput | Prisma.CoinPurchaseWhereUniqueInput[]
  update?: Prisma.CoinPurchaseUpdateWithWhereUniqueWithoutUserInput | Prisma.CoinPurchaseUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.CoinPurchaseUpdateManyWithWhereWithoutUserInput | Prisma.CoinPurchaseUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.CoinPurchaseScalarWhereInput | Prisma.CoinPurchaseScalarWhereInput[]
}

export type CoinPurchaseCreateWithoutUserInput = {
  id?: string
  coins: number
  amount: number
  currency?: $Enums.Currency
  provider?: string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
}

export type CoinPurchaseUncheckedCreateWithoutUserInput = {
  id?: string
  coins: number
  amount: number
  currency?: $Enums.Currency
  provider?: string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
}

export type CoinPurchaseCreateOrConnectWithoutUserInput = {
  where: Prisma.CoinPurchaseWhereUniqueInput
  create: Prisma.XOR<Prisma.CoinPurchaseCreateWithoutUserInput, Prisma.CoinPurchaseUncheckedCreateWithoutUserInput>
}

export type CoinPurchaseCreateManyUserInputEnvelope = {
  data: Prisma.CoinPurchaseCreateManyUserInput | Prisma.CoinPurchaseCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type CoinPurchaseUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.CoinPurchaseWhereUniqueInput
  update: Prisma.XOR<Prisma.CoinPurchaseUpdateWithoutUserInput, Prisma.CoinPurchaseUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.CoinPurchaseCreateWithoutUserInput, Prisma.CoinPurchaseUncheckedCreateWithoutUserInput>
}

export type CoinPurchaseUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.CoinPurchaseWhereUniqueInput
  data: Prisma.XOR<Prisma.CoinPurchaseUpdateWithoutUserInput, Prisma.CoinPurchaseUncheckedUpdateWithoutUserInput>
}

export type CoinPurchaseUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.CoinPurchaseScalarWhereInput
  data: Prisma.XOR<Prisma.CoinPurchaseUpdateManyMutationInput, Prisma.CoinPurchaseUncheckedUpdateManyWithoutUserInput>
}

export type CoinPurchaseScalarWhereInput = {
  AND?: Prisma.CoinPurchaseScalarWhereInput | Prisma.CoinPurchaseScalarWhereInput[]
  OR?: Prisma.CoinPurchaseScalarWhereInput[]
  NOT?: Prisma.CoinPurchaseScalarWhereInput | Prisma.CoinPurchaseScalarWhereInput[]
  id?: Prisma.StringFilter<"CoinPurchase"> | string
  userId?: Prisma.StringFilter<"CoinPurchase"> | string
  coins?: Prisma.IntFilter<"CoinPurchase"> | number
  amount?: Prisma.FloatFilter<"CoinPurchase"> | number
  currency?: Prisma.EnumCurrencyFilter<"CoinPurchase"> | $Enums.Currency
  provider?: Prisma.StringNullableFilter<"CoinPurchase"> | string | null
  meta?: Prisma.JsonNullableFilter<"CoinPurchase">
  createdAt?: Prisma.DateTimeFilter<"CoinPurchase"> | Date | string
}

export type CoinPurchaseCreateManyUserInput = {
  id?: string
  coins: number
  amount: number
  currency?: $Enums.Currency
  provider?: string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
}

export type CoinPurchaseUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  coins?: Prisma.IntFieldUpdateOperationsInput | number
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
  provider?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CoinPurchaseUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  coins?: Prisma.IntFieldUpdateOperationsInput | number
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
  provider?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CoinPurchaseUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  coins?: Prisma.IntFieldUpdateOperationsInput | number
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
  provider?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type CoinPurchaseSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  coins?: boolean
  amount?: boolean
  currency?: boolean
  provider?: boolean
  meta?: boolean
  createdAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["coinPurchase"]>

export type CoinPurchaseSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  coins?: boolean
  amount?: boolean
  currency?: boolean
  provider?: boolean
  meta?: boolean
  createdAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["coinPurchase"]>

export type CoinPurchaseSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  coins?: boolean
  amount?: boolean
  currency?: boolean
  provider?: boolean
  meta?: boolean
  createdAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["coinPurchase"]>

export type CoinPurchaseSelectScalar = {
  id?: boolean
  userId?: boolean
  coins?: boolean
  amount?: boolean
  currency?: boolean
  provider?: boolean
  meta?: boolean
  createdAt?: boolean
}

export type CoinPurchaseOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "coins" | "amount" | "currency" | "provider" | "meta" | "createdAt", ExtArgs["result"]["coinPurchase"]>
export type CoinPurchaseInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type CoinPurchaseIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type CoinPurchaseIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $CoinPurchasePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "CoinPurchase"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    coins: number
    amount: number
    currency: $Enums.Currency
    provider: string | null
    meta: runtime.JsonValue | null
    createdAt: Date
  }, ExtArgs["result"]["coinPurchase"]>
  composites: {}
}

export type CoinPurchaseGetPayload<S extends boolean | null | undefined | CoinPurchaseDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CoinPurchasePayload, S>

export type CoinPurchaseCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CoinPurchaseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CoinPurchaseCountAggregateInputType | true
  }

export interface CoinPurchaseDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CoinPurchase'], meta: { name: 'CoinPurchase' } }
  /**
   * Find zero or one CoinPurchase that matches the filter.
   * @param {CoinPurchaseFindUniqueArgs} args - Arguments to find a CoinPurchase
   * @example
   * // Get one CoinPurchase
   * const coinPurchase = await prisma.coinPurchase.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CoinPurchaseFindUniqueArgs>(args: Prisma.SelectSubset<T, CoinPurchaseFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CoinPurchaseClient<runtime.Types.Result.GetResult<Prisma.$CoinPurchasePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one CoinPurchase that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CoinPurchaseFindUniqueOrThrowArgs} args - Arguments to find a CoinPurchase
   * @example
   * // Get one CoinPurchase
   * const coinPurchase = await prisma.coinPurchase.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CoinPurchaseFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CoinPurchaseFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CoinPurchaseClient<runtime.Types.Result.GetResult<Prisma.$CoinPurchasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CoinPurchase that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CoinPurchaseFindFirstArgs} args - Arguments to find a CoinPurchase
   * @example
   * // Get one CoinPurchase
   * const coinPurchase = await prisma.coinPurchase.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CoinPurchaseFindFirstArgs>(args?: Prisma.SelectSubset<T, CoinPurchaseFindFirstArgs<ExtArgs>>): Prisma.Prisma__CoinPurchaseClient<runtime.Types.Result.GetResult<Prisma.$CoinPurchasePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CoinPurchase that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CoinPurchaseFindFirstOrThrowArgs} args - Arguments to find a CoinPurchase
   * @example
   * // Get one CoinPurchase
   * const coinPurchase = await prisma.coinPurchase.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CoinPurchaseFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CoinPurchaseFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CoinPurchaseClient<runtime.Types.Result.GetResult<Prisma.$CoinPurchasePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more CoinPurchases that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CoinPurchaseFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all CoinPurchases
   * const coinPurchases = await prisma.coinPurchase.findMany()
   * 
   * // Get first 10 CoinPurchases
   * const coinPurchases = await prisma.coinPurchase.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const coinPurchaseWithIdOnly = await prisma.coinPurchase.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CoinPurchaseFindManyArgs>(args?: Prisma.SelectSubset<T, CoinPurchaseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CoinPurchasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a CoinPurchase.
   * @param {CoinPurchaseCreateArgs} args - Arguments to create a CoinPurchase.
   * @example
   * // Create one CoinPurchase
   * const CoinPurchase = await prisma.coinPurchase.create({
   *   data: {
   *     // ... data to create a CoinPurchase
   *   }
   * })
   * 
   */
  create<T extends CoinPurchaseCreateArgs>(args: Prisma.SelectSubset<T, CoinPurchaseCreateArgs<ExtArgs>>): Prisma.Prisma__CoinPurchaseClient<runtime.Types.Result.GetResult<Prisma.$CoinPurchasePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many CoinPurchases.
   * @param {CoinPurchaseCreateManyArgs} args - Arguments to create many CoinPurchases.
   * @example
   * // Create many CoinPurchases
   * const coinPurchase = await prisma.coinPurchase.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CoinPurchaseCreateManyArgs>(args?: Prisma.SelectSubset<T, CoinPurchaseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many CoinPurchases and returns the data saved in the database.
   * @param {CoinPurchaseCreateManyAndReturnArgs} args - Arguments to create many CoinPurchases.
   * @example
   * // Create many CoinPurchases
   * const coinPurchase = await prisma.coinPurchase.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many CoinPurchases and only return the `id`
   * const coinPurchaseWithIdOnly = await prisma.coinPurchase.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CoinPurchaseCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CoinPurchaseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CoinPurchasePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a CoinPurchase.
   * @param {CoinPurchaseDeleteArgs} args - Arguments to delete one CoinPurchase.
   * @example
   * // Delete one CoinPurchase
   * const CoinPurchase = await prisma.coinPurchase.delete({
   *   where: {
   *     // ... filter to delete one CoinPurchase
   *   }
   * })
   * 
   */
  delete<T extends CoinPurchaseDeleteArgs>(args: Prisma.SelectSubset<T, CoinPurchaseDeleteArgs<ExtArgs>>): Prisma.Prisma__CoinPurchaseClient<runtime.Types.Result.GetResult<Prisma.$CoinPurchasePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one CoinPurchase.
   * @param {CoinPurchaseUpdateArgs} args - Arguments to update one CoinPurchase.
   * @example
   * // Update one CoinPurchase
   * const coinPurchase = await prisma.coinPurchase.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CoinPurchaseUpdateArgs>(args: Prisma.SelectSubset<T, CoinPurchaseUpdateArgs<ExtArgs>>): Prisma.Prisma__CoinPurchaseClient<runtime.Types.Result.GetResult<Prisma.$CoinPurchasePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more CoinPurchases.
   * @param {CoinPurchaseDeleteManyArgs} args - Arguments to filter CoinPurchases to delete.
   * @example
   * // Delete a few CoinPurchases
   * const { count } = await prisma.coinPurchase.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CoinPurchaseDeleteManyArgs>(args?: Prisma.SelectSubset<T, CoinPurchaseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CoinPurchases.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CoinPurchaseUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many CoinPurchases
   * const coinPurchase = await prisma.coinPurchase.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CoinPurchaseUpdateManyArgs>(args: Prisma.SelectSubset<T, CoinPurchaseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CoinPurchases and returns the data updated in the database.
   * @param {CoinPurchaseUpdateManyAndReturnArgs} args - Arguments to update many CoinPurchases.
   * @example
   * // Update many CoinPurchases
   * const coinPurchase = await prisma.coinPurchase.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more CoinPurchases and only return the `id`
   * const coinPurchaseWithIdOnly = await prisma.coinPurchase.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CoinPurchaseUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CoinPurchaseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CoinPurchasePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one CoinPurchase.
   * @param {CoinPurchaseUpsertArgs} args - Arguments to update or create a CoinPurchase.
   * @example
   * // Update or create a CoinPurchase
   * const coinPurchase = await prisma.coinPurchase.upsert({
   *   create: {
   *     // ... data to create a CoinPurchase
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the CoinPurchase we want to update
   *   }
   * })
   */
  upsert<T extends CoinPurchaseUpsertArgs>(args: Prisma.SelectSubset<T, CoinPurchaseUpsertArgs<ExtArgs>>): Prisma.Prisma__CoinPurchaseClient<runtime.Types.Result.GetResult<Prisma.$CoinPurchasePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of CoinPurchases.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CoinPurchaseCountArgs} args - Arguments to filter CoinPurchases to count.
   * @example
   * // Count the number of CoinPurchases
   * const count = await prisma.coinPurchase.count({
   *   where: {
   *     // ... the filter for the CoinPurchases we want to count
   *   }
   * })
  **/
  count<T extends CoinPurchaseCountArgs>(
    args?: Prisma.Subset<T, CoinPurchaseCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CoinPurchaseCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a CoinPurchase.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CoinPurchaseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CoinPurchaseAggregateArgs>(args: Prisma.Subset<T, CoinPurchaseAggregateArgs>): Prisma.PrismaPromise<GetCoinPurchaseAggregateType<T>>

  /**
   * Group by CoinPurchase.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CoinPurchaseGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CoinPurchaseGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CoinPurchaseGroupByArgs['orderBy'] }
      : { orderBy?: CoinPurchaseGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CoinPurchaseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCoinPurchaseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the CoinPurchase model
 */
readonly fields: CoinPurchaseFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for CoinPurchase.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CoinPurchaseClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the CoinPurchase model
 */
export interface CoinPurchaseFieldRefs {
  readonly id: Prisma.FieldRef<"CoinPurchase", 'String'>
  readonly userId: Prisma.FieldRef<"CoinPurchase", 'String'>
  readonly coins: Prisma.FieldRef<"CoinPurchase", 'Int'>
  readonly amount: Prisma.FieldRef<"CoinPurchase", 'Float'>
  readonly currency: Prisma.FieldRef<"CoinPurchase", 'Currency'>
  readonly provider: Prisma.FieldRef<"CoinPurchase", 'String'>
  readonly meta: Prisma.FieldRef<"CoinPurchase", 'Json'>
  readonly createdAt: Prisma.FieldRef<"CoinPurchase", 'DateTime'>
}
    

// Custom InputTypes
/**
 * CoinPurchase findUnique
 */
export type CoinPurchaseFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CoinPurchase
   */
  select?: Prisma.CoinPurchaseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CoinPurchase
   */
  omit?: Prisma.CoinPurchaseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CoinPurchaseInclude<ExtArgs> | null
  /**
   * Filter, which CoinPurchase to fetch.
   */
  where: Prisma.CoinPurchaseWhereUniqueInput
}

/**
 * CoinPurchase findUniqueOrThrow
 */
export type CoinPurchaseFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CoinPurchase
   */
  select?: Prisma.CoinPurchaseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CoinPurchase
   */
  omit?: Prisma.CoinPurchaseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CoinPurchaseInclude<ExtArgs> | null
  /**
   * Filter, which CoinPurchase to fetch.
   */
  where: Prisma.CoinPurchaseWhereUniqueInput
}

/**
 * CoinPurchase findFirst
 */
export type CoinPurchaseFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CoinPurchase
   */
  select?: Prisma.CoinPurchaseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CoinPurchase
   */
  omit?: Prisma.CoinPurchaseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CoinPurchaseInclude<ExtArgs> | null
  /**
   * Filter, which CoinPurchase to fetch.
   */
  where?: Prisma.CoinPurchaseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CoinPurchases to fetch.
   */
  orderBy?: Prisma.CoinPurchaseOrderByWithRelationInput | Prisma.CoinPurchaseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CoinPurchases.
   */
  cursor?: Prisma.CoinPurchaseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CoinPurchases from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CoinPurchases.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CoinPurchases.
   */
  distinct?: Prisma.CoinPurchaseScalarFieldEnum | Prisma.CoinPurchaseScalarFieldEnum[]
}

/**
 * CoinPurchase findFirstOrThrow
 */
export type CoinPurchaseFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CoinPurchase
   */
  select?: Prisma.CoinPurchaseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CoinPurchase
   */
  omit?: Prisma.CoinPurchaseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CoinPurchaseInclude<ExtArgs> | null
  /**
   * Filter, which CoinPurchase to fetch.
   */
  where?: Prisma.CoinPurchaseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CoinPurchases to fetch.
   */
  orderBy?: Prisma.CoinPurchaseOrderByWithRelationInput | Prisma.CoinPurchaseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CoinPurchases.
   */
  cursor?: Prisma.CoinPurchaseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CoinPurchases from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CoinPurchases.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CoinPurchases.
   */
  distinct?: Prisma.CoinPurchaseScalarFieldEnum | Prisma.CoinPurchaseScalarFieldEnum[]
}

/**
 * CoinPurchase findMany
 */
export type CoinPurchaseFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CoinPurchase
   */
  select?: Prisma.CoinPurchaseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CoinPurchase
   */
  omit?: Prisma.CoinPurchaseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CoinPurchaseInclude<ExtArgs> | null
  /**
   * Filter, which CoinPurchases to fetch.
   */
  where?: Prisma.CoinPurchaseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CoinPurchases to fetch.
   */
  orderBy?: Prisma.CoinPurchaseOrderByWithRelationInput | Prisma.CoinPurchaseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing CoinPurchases.
   */
  cursor?: Prisma.CoinPurchaseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CoinPurchases from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CoinPurchases.
   */
  skip?: number
  distinct?: Prisma.CoinPurchaseScalarFieldEnum | Prisma.CoinPurchaseScalarFieldEnum[]
}

/**
 * CoinPurchase create
 */
export type CoinPurchaseCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CoinPurchase
   */
  select?: Prisma.CoinPurchaseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CoinPurchase
   */
  omit?: Prisma.CoinPurchaseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CoinPurchaseInclude<ExtArgs> | null
  /**
   * The data needed to create a CoinPurchase.
   */
  data: Prisma.XOR<Prisma.CoinPurchaseCreateInput, Prisma.CoinPurchaseUncheckedCreateInput>
}

/**
 * CoinPurchase createMany
 */
export type CoinPurchaseCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many CoinPurchases.
   */
  data: Prisma.CoinPurchaseCreateManyInput | Prisma.CoinPurchaseCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * CoinPurchase createManyAndReturn
 */
export type CoinPurchaseCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CoinPurchase
   */
  select?: Prisma.CoinPurchaseSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CoinPurchase
   */
  omit?: Prisma.CoinPurchaseOmit<ExtArgs> | null
  /**
   * The data used to create many CoinPurchases.
   */
  data: Prisma.CoinPurchaseCreateManyInput | Prisma.CoinPurchaseCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CoinPurchaseIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * CoinPurchase update
 */
export type CoinPurchaseUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CoinPurchase
   */
  select?: Prisma.CoinPurchaseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CoinPurchase
   */
  omit?: Prisma.CoinPurchaseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CoinPurchaseInclude<ExtArgs> | null
  /**
   * The data needed to update a CoinPurchase.
   */
  data: Prisma.XOR<Prisma.CoinPurchaseUpdateInput, Prisma.CoinPurchaseUncheckedUpdateInput>
  /**
   * Choose, which CoinPurchase to update.
   */
  where: Prisma.CoinPurchaseWhereUniqueInput
}

/**
 * CoinPurchase updateMany
 */
export type CoinPurchaseUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update CoinPurchases.
   */
  data: Prisma.XOR<Prisma.CoinPurchaseUpdateManyMutationInput, Prisma.CoinPurchaseUncheckedUpdateManyInput>
  /**
   * Filter which CoinPurchases to update
   */
  where?: Prisma.CoinPurchaseWhereInput
  /**
   * Limit how many CoinPurchases to update.
   */
  limit?: number
}

/**
 * CoinPurchase updateManyAndReturn
 */
export type CoinPurchaseUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CoinPurchase
   */
  select?: Prisma.CoinPurchaseSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CoinPurchase
   */
  omit?: Prisma.CoinPurchaseOmit<ExtArgs> | null
  /**
   * The data used to update CoinPurchases.
   */
  data: Prisma.XOR<Prisma.CoinPurchaseUpdateManyMutationInput, Prisma.CoinPurchaseUncheckedUpdateManyInput>
  /**
   * Filter which CoinPurchases to update
   */
  where?: Prisma.CoinPurchaseWhereInput
  /**
   * Limit how many CoinPurchases to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CoinPurchaseIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * CoinPurchase upsert
 */
export type CoinPurchaseUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CoinPurchase
   */
  select?: Prisma.CoinPurchaseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CoinPurchase
   */
  omit?: Prisma.CoinPurchaseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CoinPurchaseInclude<ExtArgs> | null
  /**
   * The filter to search for the CoinPurchase to update in case it exists.
   */
  where: Prisma.CoinPurchaseWhereUniqueInput
  /**
   * In case the CoinPurchase found by the `where` argument doesn't exist, create a new CoinPurchase with this data.
   */
  create: Prisma.XOR<Prisma.CoinPurchaseCreateInput, Prisma.CoinPurchaseUncheckedCreateInput>
  /**
   * In case the CoinPurchase was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CoinPurchaseUpdateInput, Prisma.CoinPurchaseUncheckedUpdateInput>
}

/**
 * CoinPurchase delete
 */
export type CoinPurchaseDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CoinPurchase
   */
  select?: Prisma.CoinPurchaseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CoinPurchase
   */
  omit?: Prisma.CoinPurchaseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CoinPurchaseInclude<ExtArgs> | null
  /**
   * Filter which CoinPurchase to delete.
   */
  where: Prisma.CoinPurchaseWhereUniqueInput
}

/**
 * CoinPurchase deleteMany
 */
export type CoinPurchaseDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CoinPurchases to delete
   */
  where?: Prisma.CoinPurchaseWhereInput
  /**
   * Limit how many CoinPurchases to delete.
   */
  limit?: number
}

/**
 * CoinPurchase without action
 */
export type CoinPurchaseDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CoinPurchase
   */
  select?: Prisma.CoinPurchaseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CoinPurchase
   */
  omit?: Prisma.CoinPurchaseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CoinPurchaseInclude<ExtArgs> | null
}
