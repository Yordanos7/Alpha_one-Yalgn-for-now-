
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `AdminNote` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model AdminNote
 * 
 */
export type AdminNoteModel = runtime.Types.Result.DefaultSelection<Prisma.$AdminNotePayload>

export type AggregateAdminNote = {
  _count: AdminNoteCountAggregateOutputType | null
  _min: AdminNoteMinAggregateOutputType | null
  _max: AdminNoteMaxAggregateOutputType | null
}

export type AdminNoteMinAggregateOutputType = {
  id: string | null
  userId: string | null
  note: string | null
  createdBy: string | null
  createdAt: Date | null
}

export type AdminNoteMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  note: string | null
  createdBy: string | null
  createdAt: Date | null
}

export type AdminNoteCountAggregateOutputType = {
  id: number
  userId: number
  note: number
  createdBy: number
  createdAt: number
  _all: number
}


export type AdminNoteMinAggregateInputType = {
  id?: true
  userId?: true
  note?: true
  createdBy?: true
  createdAt?: true
}

export type AdminNoteMaxAggregateInputType = {
  id?: true
  userId?: true
  note?: true
  createdBy?: true
  createdAt?: true
}

export type AdminNoteCountAggregateInputType = {
  id?: true
  userId?: true
  note?: true
  createdBy?: true
  createdAt?: true
  _all?: true
}

export type AdminNoteAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AdminNote to aggregate.
   */
  where?: Prisma.AdminNoteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AdminNotes to fetch.
   */
  orderBy?: Prisma.AdminNoteOrderByWithRelationInput | Prisma.AdminNoteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AdminNoteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AdminNotes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AdminNotes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned AdminNotes
  **/
  _count?: true | AdminNoteCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AdminNoteMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AdminNoteMaxAggregateInputType
}

export type GetAdminNoteAggregateType<T extends AdminNoteAggregateArgs> = {
      [P in keyof T & keyof AggregateAdminNote]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAdminNote[P]>
    : Prisma.GetScalarType<T[P], AggregateAdminNote[P]>
}




export type AdminNoteGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AdminNoteWhereInput
  orderBy?: Prisma.AdminNoteOrderByWithAggregationInput | Prisma.AdminNoteOrderByWithAggregationInput[]
  by: Prisma.AdminNoteScalarFieldEnum[] | Prisma.AdminNoteScalarFieldEnum
  having?: Prisma.AdminNoteScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AdminNoteCountAggregateInputType | true
  _min?: AdminNoteMinAggregateInputType
  _max?: AdminNoteMaxAggregateInputType
}

export type AdminNoteGroupByOutputType = {
  id: string
  userId: string
  note: string
  createdBy: string | null
  createdAt: Date
  _count: AdminNoteCountAggregateOutputType | null
  _min: AdminNoteMinAggregateOutputType | null
  _max: AdminNoteMaxAggregateOutputType | null
}

type GetAdminNoteGroupByPayload<T extends AdminNoteGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AdminNoteGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AdminNoteGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AdminNoteGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AdminNoteGroupByOutputType[P]>
      }
    >
  >



export type AdminNoteWhereInput = {
  AND?: Prisma.AdminNoteWhereInput | Prisma.AdminNoteWhereInput[]
  OR?: Prisma.AdminNoteWhereInput[]
  NOT?: Prisma.AdminNoteWhereInput | Prisma.AdminNoteWhereInput[]
  id?: Prisma.StringFilter<"AdminNote"> | string
  userId?: Prisma.StringFilter<"AdminNote"> | string
  note?: Prisma.StringFilter<"AdminNote"> | string
  createdBy?: Prisma.StringNullableFilter<"AdminNote"> | string | null
  createdAt?: Prisma.DateTimeFilter<"AdminNote"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type AdminNoteOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  note?: Prisma.SortOrder
  createdBy?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
}

export type AdminNoteWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.AdminNoteWhereInput | Prisma.AdminNoteWhereInput[]
  OR?: Prisma.AdminNoteWhereInput[]
  NOT?: Prisma.AdminNoteWhereInput | Prisma.AdminNoteWhereInput[]
  userId?: Prisma.StringFilter<"AdminNote"> | string
  note?: Prisma.StringFilter<"AdminNote"> | string
  createdBy?: Prisma.StringNullableFilter<"AdminNote"> | string | null
  createdAt?: Prisma.DateTimeFilter<"AdminNote"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type AdminNoteOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  note?: Prisma.SortOrder
  createdBy?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.AdminNoteCountOrderByAggregateInput
  _max?: Prisma.AdminNoteMaxOrderByAggregateInput
  _min?: Prisma.AdminNoteMinOrderByAggregateInput
}

export type AdminNoteScalarWhereWithAggregatesInput = {
  AND?: Prisma.AdminNoteScalarWhereWithAggregatesInput | Prisma.AdminNoteScalarWhereWithAggregatesInput[]
  OR?: Prisma.AdminNoteScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AdminNoteScalarWhereWithAggregatesInput | Prisma.AdminNoteScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"AdminNote"> | string
  userId?: Prisma.StringWithAggregatesFilter<"AdminNote"> | string
  note?: Prisma.StringWithAggregatesFilter<"AdminNote"> | string
  createdBy?: Prisma.StringNullableWithAggregatesFilter<"AdminNote"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"AdminNote"> | Date | string
}

export type AdminNoteCreateInput = {
  id?: string
  note: string
  createdBy?: string | null
  createdAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutAdminNotesInput
}

export type AdminNoteUncheckedCreateInput = {
  id?: string
  userId: string
  note: string
  createdBy?: string | null
  createdAt?: Date | string
}

export type AdminNoteUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  note?: Prisma.StringFieldUpdateOperationsInput | string
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutAdminNotesNestedInput
}

export type AdminNoteUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  note?: Prisma.StringFieldUpdateOperationsInput | string
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AdminNoteCreateManyInput = {
  id?: string
  userId: string
  note: string
  createdBy?: string | null
  createdAt?: Date | string
}

export type AdminNoteUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  note?: Prisma.StringFieldUpdateOperationsInput | string
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AdminNoteUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  note?: Prisma.StringFieldUpdateOperationsInput | string
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AdminNoteListRelationFilter = {
  every?: Prisma.AdminNoteWhereInput
  some?: Prisma.AdminNoteWhereInput
  none?: Prisma.AdminNoteWhereInput
}

export type AdminNoteOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type AdminNoteCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  note?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type AdminNoteMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  note?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type AdminNoteMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  note?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type AdminNoteCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.AdminNoteCreateWithoutUserInput, Prisma.AdminNoteUncheckedCreateWithoutUserInput> | Prisma.AdminNoteCreateWithoutUserInput[] | Prisma.AdminNoteUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AdminNoteCreateOrConnectWithoutUserInput | Prisma.AdminNoteCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.AdminNoteCreateManyUserInputEnvelope
  connect?: Prisma.AdminNoteWhereUniqueInput | Prisma.AdminNoteWhereUniqueInput[]
}

export type AdminNoteUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.AdminNoteCreateWithoutUserInput, Prisma.AdminNoteUncheckedCreateWithoutUserInput> | Prisma.AdminNoteCreateWithoutUserInput[] | Prisma.AdminNoteUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AdminNoteCreateOrConnectWithoutUserInput | Prisma.AdminNoteCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.AdminNoteCreateManyUserInputEnvelope
  connect?: Prisma.AdminNoteWhereUniqueInput | Prisma.AdminNoteWhereUniqueInput[]
}

export type AdminNoteUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.AdminNoteCreateWithoutUserInput, Prisma.AdminNoteUncheckedCreateWithoutUserInput> | Prisma.AdminNoteCreateWithoutUserInput[] | Prisma.AdminNoteUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AdminNoteCreateOrConnectWithoutUserInput | Prisma.AdminNoteCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.AdminNoteUpsertWithWhereUniqueWithoutUserInput | Prisma.AdminNoteUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.AdminNoteCreateManyUserInputEnvelope
  set?: Prisma.AdminNoteWhereUniqueInput | Prisma.AdminNoteWhereUniqueInput[]
  disconnect?: Prisma.AdminNoteWhereUniqueInput | Prisma.AdminNoteWhereUniqueInput[]
  delete?: Prisma.AdminNoteWhereUniqueInput | Prisma.AdminNoteWhereUniqueInput[]
  connect?: Prisma.AdminNoteWhereUniqueInput | Prisma.AdminNoteWhereUniqueInput[]
  update?: Prisma.AdminNoteUpdateWithWhereUniqueWithoutUserInput | Prisma.AdminNoteUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.AdminNoteUpdateManyWithWhereWithoutUserInput | Prisma.AdminNoteUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.AdminNoteScalarWhereInput | Prisma.AdminNoteScalarWhereInput[]
}

export type AdminNoteUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.AdminNoteCreateWithoutUserInput, Prisma.AdminNoteUncheckedCreateWithoutUserInput> | Prisma.AdminNoteCreateWithoutUserInput[] | Prisma.AdminNoteUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AdminNoteCreateOrConnectWithoutUserInput | Prisma.AdminNoteCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.AdminNoteUpsertWithWhereUniqueWithoutUserInput | Prisma.AdminNoteUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.AdminNoteCreateManyUserInputEnvelope
  set?: Prisma.AdminNoteWhereUniqueInput | Prisma.AdminNoteWhereUniqueInput[]
  disconnect?: Prisma.AdminNoteWhereUniqueInput | Prisma.AdminNoteWhereUniqueInput[]
  delete?: Prisma.AdminNoteWhereUniqueInput | Prisma.AdminNoteWhereUniqueInput[]
  connect?: Prisma.AdminNoteWhereUniqueInput | Prisma.AdminNoteWhereUniqueInput[]
  update?: Prisma.AdminNoteUpdateWithWhereUniqueWithoutUserInput | Prisma.AdminNoteUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.AdminNoteUpdateManyWithWhereWithoutUserInput | Prisma.AdminNoteUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.AdminNoteScalarWhereInput | Prisma.AdminNoteScalarWhereInput[]
}

export type AdminNoteCreateWithoutUserInput = {
  id?: string
  note: string
  createdBy?: string | null
  createdAt?: Date | string
}

export type AdminNoteUncheckedCreateWithoutUserInput = {
  id?: string
  note: string
  createdBy?: string | null
  createdAt?: Date | string
}

export type AdminNoteCreateOrConnectWithoutUserInput = {
  where: Prisma.AdminNoteWhereUniqueInput
  create: Prisma.XOR<Prisma.AdminNoteCreateWithoutUserInput, Prisma.AdminNoteUncheckedCreateWithoutUserInput>
}

export type AdminNoteCreateManyUserInputEnvelope = {
  data: Prisma.AdminNoteCreateManyUserInput | Prisma.AdminNoteCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type AdminNoteUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.AdminNoteWhereUniqueInput
  update: Prisma.XOR<Prisma.AdminNoteUpdateWithoutUserInput, Prisma.AdminNoteUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.AdminNoteCreateWithoutUserInput, Prisma.AdminNoteUncheckedCreateWithoutUserInput>
}

export type AdminNoteUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.AdminNoteWhereUniqueInput
  data: Prisma.XOR<Prisma.AdminNoteUpdateWithoutUserInput, Prisma.AdminNoteUncheckedUpdateWithoutUserInput>
}

export type AdminNoteUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.AdminNoteScalarWhereInput
  data: Prisma.XOR<Prisma.AdminNoteUpdateManyMutationInput, Prisma.AdminNoteUncheckedUpdateManyWithoutUserInput>
}

export type AdminNoteScalarWhereInput = {
  AND?: Prisma.AdminNoteScalarWhereInput | Prisma.AdminNoteScalarWhereInput[]
  OR?: Prisma.AdminNoteScalarWhereInput[]
  NOT?: Prisma.AdminNoteScalarWhereInput | Prisma.AdminNoteScalarWhereInput[]
  id?: Prisma.StringFilter<"AdminNote"> | string
  userId?: Prisma.StringFilter<"AdminNote"> | string
  note?: Prisma.StringFilter<"AdminNote"> | string
  createdBy?: Prisma.StringNullableFilter<"AdminNote"> | string | null
  createdAt?: Prisma.DateTimeFilter<"AdminNote"> | Date | string
}

export type AdminNoteCreateManyUserInput = {
  id?: string
  note: string
  createdBy?: string | null
  createdAt?: Date | string
}

export type AdminNoteUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  note?: Prisma.StringFieldUpdateOperationsInput | string
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AdminNoteUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  note?: Prisma.StringFieldUpdateOperationsInput | string
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AdminNoteUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  note?: Prisma.StringFieldUpdateOperationsInput | string
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type AdminNoteSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  note?: boolean
  createdBy?: boolean
  createdAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["adminNote"]>

export type AdminNoteSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  note?: boolean
  createdBy?: boolean
  createdAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["adminNote"]>

export type AdminNoteSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  note?: boolean
  createdBy?: boolean
  createdAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["adminNote"]>

export type AdminNoteSelectScalar = {
  id?: boolean
  userId?: boolean
  note?: boolean
  createdBy?: boolean
  createdAt?: boolean
}

export type AdminNoteOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "note" | "createdBy" | "createdAt", ExtArgs["result"]["adminNote"]>
export type AdminNoteInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type AdminNoteIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type AdminNoteIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $AdminNotePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "AdminNote"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    note: string
    createdBy: string | null
    createdAt: Date
  }, ExtArgs["result"]["adminNote"]>
  composites: {}
}

export type AdminNoteGetPayload<S extends boolean | null | undefined | AdminNoteDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AdminNotePayload, S>

export type AdminNoteCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AdminNoteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AdminNoteCountAggregateInputType | true
  }

export interface AdminNoteDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AdminNote'], meta: { name: 'AdminNote' } }
  /**
   * Find zero or one AdminNote that matches the filter.
   * @param {AdminNoteFindUniqueArgs} args - Arguments to find a AdminNote
   * @example
   * // Get one AdminNote
   * const adminNote = await prisma.adminNote.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AdminNoteFindUniqueArgs>(args: Prisma.SelectSubset<T, AdminNoteFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AdminNoteClient<runtime.Types.Result.GetResult<Prisma.$AdminNotePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one AdminNote that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AdminNoteFindUniqueOrThrowArgs} args - Arguments to find a AdminNote
   * @example
   * // Get one AdminNote
   * const adminNote = await prisma.adminNote.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AdminNoteFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AdminNoteFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AdminNoteClient<runtime.Types.Result.GetResult<Prisma.$AdminNotePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AdminNote that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdminNoteFindFirstArgs} args - Arguments to find a AdminNote
   * @example
   * // Get one AdminNote
   * const adminNote = await prisma.adminNote.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AdminNoteFindFirstArgs>(args?: Prisma.SelectSubset<T, AdminNoteFindFirstArgs<ExtArgs>>): Prisma.Prisma__AdminNoteClient<runtime.Types.Result.GetResult<Prisma.$AdminNotePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AdminNote that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdminNoteFindFirstOrThrowArgs} args - Arguments to find a AdminNote
   * @example
   * // Get one AdminNote
   * const adminNote = await prisma.adminNote.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AdminNoteFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AdminNoteFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AdminNoteClient<runtime.Types.Result.GetResult<Prisma.$AdminNotePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more AdminNotes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdminNoteFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AdminNotes
   * const adminNotes = await prisma.adminNote.findMany()
   * 
   * // Get first 10 AdminNotes
   * const adminNotes = await prisma.adminNote.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const adminNoteWithIdOnly = await prisma.adminNote.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AdminNoteFindManyArgs>(args?: Prisma.SelectSubset<T, AdminNoteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AdminNotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a AdminNote.
   * @param {AdminNoteCreateArgs} args - Arguments to create a AdminNote.
   * @example
   * // Create one AdminNote
   * const AdminNote = await prisma.adminNote.create({
   *   data: {
   *     // ... data to create a AdminNote
   *   }
   * })
   * 
   */
  create<T extends AdminNoteCreateArgs>(args: Prisma.SelectSubset<T, AdminNoteCreateArgs<ExtArgs>>): Prisma.Prisma__AdminNoteClient<runtime.Types.Result.GetResult<Prisma.$AdminNotePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many AdminNotes.
   * @param {AdminNoteCreateManyArgs} args - Arguments to create many AdminNotes.
   * @example
   * // Create many AdminNotes
   * const adminNote = await prisma.adminNote.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AdminNoteCreateManyArgs>(args?: Prisma.SelectSubset<T, AdminNoteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many AdminNotes and returns the data saved in the database.
   * @param {AdminNoteCreateManyAndReturnArgs} args - Arguments to create many AdminNotes.
   * @example
   * // Create many AdminNotes
   * const adminNote = await prisma.adminNote.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many AdminNotes and only return the `id`
   * const adminNoteWithIdOnly = await prisma.adminNote.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AdminNoteCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AdminNoteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AdminNotePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a AdminNote.
   * @param {AdminNoteDeleteArgs} args - Arguments to delete one AdminNote.
   * @example
   * // Delete one AdminNote
   * const AdminNote = await prisma.adminNote.delete({
   *   where: {
   *     // ... filter to delete one AdminNote
   *   }
   * })
   * 
   */
  delete<T extends AdminNoteDeleteArgs>(args: Prisma.SelectSubset<T, AdminNoteDeleteArgs<ExtArgs>>): Prisma.Prisma__AdminNoteClient<runtime.Types.Result.GetResult<Prisma.$AdminNotePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one AdminNote.
   * @param {AdminNoteUpdateArgs} args - Arguments to update one AdminNote.
   * @example
   * // Update one AdminNote
   * const adminNote = await prisma.adminNote.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AdminNoteUpdateArgs>(args: Prisma.SelectSubset<T, AdminNoteUpdateArgs<ExtArgs>>): Prisma.Prisma__AdminNoteClient<runtime.Types.Result.GetResult<Prisma.$AdminNotePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more AdminNotes.
   * @param {AdminNoteDeleteManyArgs} args - Arguments to filter AdminNotes to delete.
   * @example
   * // Delete a few AdminNotes
   * const { count } = await prisma.adminNote.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AdminNoteDeleteManyArgs>(args?: Prisma.SelectSubset<T, AdminNoteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AdminNotes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdminNoteUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AdminNotes
   * const adminNote = await prisma.adminNote.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AdminNoteUpdateManyArgs>(args: Prisma.SelectSubset<T, AdminNoteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AdminNotes and returns the data updated in the database.
   * @param {AdminNoteUpdateManyAndReturnArgs} args - Arguments to update many AdminNotes.
   * @example
   * // Update many AdminNotes
   * const adminNote = await prisma.adminNote.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more AdminNotes and only return the `id`
   * const adminNoteWithIdOnly = await prisma.adminNote.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AdminNoteUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AdminNoteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AdminNotePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one AdminNote.
   * @param {AdminNoteUpsertArgs} args - Arguments to update or create a AdminNote.
   * @example
   * // Update or create a AdminNote
   * const adminNote = await prisma.adminNote.upsert({
   *   create: {
   *     // ... data to create a AdminNote
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AdminNote we want to update
   *   }
   * })
   */
  upsert<T extends AdminNoteUpsertArgs>(args: Prisma.SelectSubset<T, AdminNoteUpsertArgs<ExtArgs>>): Prisma.Prisma__AdminNoteClient<runtime.Types.Result.GetResult<Prisma.$AdminNotePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of AdminNotes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdminNoteCountArgs} args - Arguments to filter AdminNotes to count.
   * @example
   * // Count the number of AdminNotes
   * const count = await prisma.adminNote.count({
   *   where: {
   *     // ... the filter for the AdminNotes we want to count
   *   }
   * })
  **/
  count<T extends AdminNoteCountArgs>(
    args?: Prisma.Subset<T, AdminNoteCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AdminNoteCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a AdminNote.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdminNoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AdminNoteAggregateArgs>(args: Prisma.Subset<T, AdminNoteAggregateArgs>): Prisma.PrismaPromise<GetAdminNoteAggregateType<T>>

  /**
   * Group by AdminNote.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdminNoteGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AdminNoteGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AdminNoteGroupByArgs['orderBy'] }
      : { orderBy?: AdminNoteGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AdminNoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminNoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the AdminNote model
 */
readonly fields: AdminNoteFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AdminNote.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AdminNoteClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the AdminNote model
 */
export interface AdminNoteFieldRefs {
  readonly id: Prisma.FieldRef<"AdminNote", 'String'>
  readonly userId: Prisma.FieldRef<"AdminNote", 'String'>
  readonly note: Prisma.FieldRef<"AdminNote", 'String'>
  readonly createdBy: Prisma.FieldRef<"AdminNote", 'String'>
  readonly createdAt: Prisma.FieldRef<"AdminNote", 'DateTime'>
}
    

// Custom InputTypes
/**
 * AdminNote findUnique
 */
export type AdminNoteFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdminNote
   */
  select?: Prisma.AdminNoteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdminNote
   */
  omit?: Prisma.AdminNoteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdminNoteInclude<ExtArgs> | null
  /**
   * Filter, which AdminNote to fetch.
   */
  where: Prisma.AdminNoteWhereUniqueInput
}

/**
 * AdminNote findUniqueOrThrow
 */
export type AdminNoteFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdminNote
   */
  select?: Prisma.AdminNoteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdminNote
   */
  omit?: Prisma.AdminNoteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdminNoteInclude<ExtArgs> | null
  /**
   * Filter, which AdminNote to fetch.
   */
  where: Prisma.AdminNoteWhereUniqueInput
}

/**
 * AdminNote findFirst
 */
export type AdminNoteFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdminNote
   */
  select?: Prisma.AdminNoteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdminNote
   */
  omit?: Prisma.AdminNoteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdminNoteInclude<ExtArgs> | null
  /**
   * Filter, which AdminNote to fetch.
   */
  where?: Prisma.AdminNoteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AdminNotes to fetch.
   */
  orderBy?: Prisma.AdminNoteOrderByWithRelationInput | Prisma.AdminNoteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AdminNotes.
   */
  cursor?: Prisma.AdminNoteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AdminNotes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AdminNotes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AdminNotes.
   */
  distinct?: Prisma.AdminNoteScalarFieldEnum | Prisma.AdminNoteScalarFieldEnum[]
}

/**
 * AdminNote findFirstOrThrow
 */
export type AdminNoteFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdminNote
   */
  select?: Prisma.AdminNoteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdminNote
   */
  omit?: Prisma.AdminNoteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdminNoteInclude<ExtArgs> | null
  /**
   * Filter, which AdminNote to fetch.
   */
  where?: Prisma.AdminNoteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AdminNotes to fetch.
   */
  orderBy?: Prisma.AdminNoteOrderByWithRelationInput | Prisma.AdminNoteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AdminNotes.
   */
  cursor?: Prisma.AdminNoteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AdminNotes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AdminNotes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AdminNotes.
   */
  distinct?: Prisma.AdminNoteScalarFieldEnum | Prisma.AdminNoteScalarFieldEnum[]
}

/**
 * AdminNote findMany
 */
export type AdminNoteFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdminNote
   */
  select?: Prisma.AdminNoteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdminNote
   */
  omit?: Prisma.AdminNoteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdminNoteInclude<ExtArgs> | null
  /**
   * Filter, which AdminNotes to fetch.
   */
  where?: Prisma.AdminNoteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AdminNotes to fetch.
   */
  orderBy?: Prisma.AdminNoteOrderByWithRelationInput | Prisma.AdminNoteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing AdminNotes.
   */
  cursor?: Prisma.AdminNoteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AdminNotes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AdminNotes.
   */
  skip?: number
  distinct?: Prisma.AdminNoteScalarFieldEnum | Prisma.AdminNoteScalarFieldEnum[]
}

/**
 * AdminNote create
 */
export type AdminNoteCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdminNote
   */
  select?: Prisma.AdminNoteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdminNote
   */
  omit?: Prisma.AdminNoteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdminNoteInclude<ExtArgs> | null
  /**
   * The data needed to create a AdminNote.
   */
  data: Prisma.XOR<Prisma.AdminNoteCreateInput, Prisma.AdminNoteUncheckedCreateInput>
}

/**
 * AdminNote createMany
 */
export type AdminNoteCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many AdminNotes.
   */
  data: Prisma.AdminNoteCreateManyInput | Prisma.AdminNoteCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AdminNote createManyAndReturn
 */
export type AdminNoteCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdminNote
   */
  select?: Prisma.AdminNoteSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AdminNote
   */
  omit?: Prisma.AdminNoteOmit<ExtArgs> | null
  /**
   * The data used to create many AdminNotes.
   */
  data: Prisma.AdminNoteCreateManyInput | Prisma.AdminNoteCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdminNoteIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * AdminNote update
 */
export type AdminNoteUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdminNote
   */
  select?: Prisma.AdminNoteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdminNote
   */
  omit?: Prisma.AdminNoteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdminNoteInclude<ExtArgs> | null
  /**
   * The data needed to update a AdminNote.
   */
  data: Prisma.XOR<Prisma.AdminNoteUpdateInput, Prisma.AdminNoteUncheckedUpdateInput>
  /**
   * Choose, which AdminNote to update.
   */
  where: Prisma.AdminNoteWhereUniqueInput
}

/**
 * AdminNote updateMany
 */
export type AdminNoteUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update AdminNotes.
   */
  data: Prisma.XOR<Prisma.AdminNoteUpdateManyMutationInput, Prisma.AdminNoteUncheckedUpdateManyInput>
  /**
   * Filter which AdminNotes to update
   */
  where?: Prisma.AdminNoteWhereInput
  /**
   * Limit how many AdminNotes to update.
   */
  limit?: number
}

/**
 * AdminNote updateManyAndReturn
 */
export type AdminNoteUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdminNote
   */
  select?: Prisma.AdminNoteSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AdminNote
   */
  omit?: Prisma.AdminNoteOmit<ExtArgs> | null
  /**
   * The data used to update AdminNotes.
   */
  data: Prisma.XOR<Prisma.AdminNoteUpdateManyMutationInput, Prisma.AdminNoteUncheckedUpdateManyInput>
  /**
   * Filter which AdminNotes to update
   */
  where?: Prisma.AdminNoteWhereInput
  /**
   * Limit how many AdminNotes to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdminNoteIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * AdminNote upsert
 */
export type AdminNoteUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdminNote
   */
  select?: Prisma.AdminNoteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdminNote
   */
  omit?: Prisma.AdminNoteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdminNoteInclude<ExtArgs> | null
  /**
   * The filter to search for the AdminNote to update in case it exists.
   */
  where: Prisma.AdminNoteWhereUniqueInput
  /**
   * In case the AdminNote found by the `where` argument doesn't exist, create a new AdminNote with this data.
   */
  create: Prisma.XOR<Prisma.AdminNoteCreateInput, Prisma.AdminNoteUncheckedCreateInput>
  /**
   * In case the AdminNote was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AdminNoteUpdateInput, Prisma.AdminNoteUncheckedUpdateInput>
}

/**
 * AdminNote delete
 */
export type AdminNoteDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdminNote
   */
  select?: Prisma.AdminNoteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdminNote
   */
  omit?: Prisma.AdminNoteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdminNoteInclude<ExtArgs> | null
  /**
   * Filter which AdminNote to delete.
   */
  where: Prisma.AdminNoteWhereUniqueInput
}

/**
 * AdminNote deleteMany
 */
export type AdminNoteDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AdminNotes to delete
   */
  where?: Prisma.AdminNoteWhereInput
  /**
   * Limit how many AdminNotes to delete.
   */
  limit?: number
}

/**
 * AdminNote without action
 */
export type AdminNoteDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdminNote
   */
  select?: Prisma.AdminNoteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdminNote
   */
  omit?: Prisma.AdminNoteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdminNoteInclude<ExtArgs> | null
}
