
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.0
 * Query Engine version: c0aafc03b8ef6cdced8654b9a817999e02457d6a
 */
Prisma.prismaVersion = {
  client: "6.17.0",
  engine: "c0aafc03b8ef6cdced8654b9a817999e02457d6a"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  phone: 'phone',
  passwordHash: 'passwordHash',
  role: 'role',
  displayName: 'displayName',
  username: 'username',
  bio: 'bio',
  avatarUrl: 'avatarUrl',
  location: 'location',
  languages: 'languages',
  isActive: 'isActive',
  isVerified: 'isVerified',
  verificationId: 'verificationId',
  profileId: 'profileId',
  coins: 'coins',
  walletId: 'walletId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  expiresAt: 'expiresAt',
  token: 'token',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  userId: 'userId'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  providerId: 'providerId',
  userId: 'userId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  idToken: 'idToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  headline: 'headline',
  hourlyRate: 'hourlyRate',
  currency: 'currency',
  availability: 'availability',
  experience: 'experience',
  education: 'education',
  completedJobs: 'completedJobs',
  successRate: 'successRate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SkillScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  createdAt: 'createdAt'
};

exports.Prisma.ProfileSkillScalarFieldEnum = {
  id: 'id',
  profileId: 'profileId',
  skillId: 'skillId',
  level: 'level',
  createdAt: 'createdAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  createdAt: 'createdAt'
};

exports.Prisma.ListingScalarFieldEnum = {
  id: 'id',
  providerId: 'providerId',
  title: 'title',
  slug: 'slug',
  description: 'description',
  price: 'price',
  currency: 'currency',
  deliveryDays: 'deliveryDays',
  categoryId: 'categoryId',
  images: 'images',
  tags: 'tags',
  isPublished: 'isPublished',
  rating: 'rating',
  reviewCount: 'reviewCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JobScalarFieldEnum = {
  id: 'id',
  seekerId: 'seekerId',
  title: 'title',
  slug: 'slug',
  description: 'description',
  type: 'type',
  budgetMin: 'budgetMin',
  budgetMax: 'budgetMax',
  currency: 'currency',
  deadline: 'deadline',
  status: 'status',
  attachments: 'attachments',
  location: 'location',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProposalScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  providerId: 'providerId',
  coverLetter: 'coverLetter',
  price: 'price',
  currency: 'currency',
  estimatedDays: 'estimatedDays',
  status: 'status',
  attachments: 'attachments',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContractScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  clientId: 'clientId',
  providerId: 'providerId',
  totalAmount: 'totalAmount',
  currency: 'currency',
  status: 'status',
  escrowId: 'escrowId',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MilestoneScalarFieldEnum = {
  id: 'id',
  contractId: 'contractId',
  title: 'title',
  description: 'description',
  amount: 'amount',
  dueDate: 'dueDate',
  isPaid: 'isPaid',
  createdAt: 'createdAt'
};

exports.Prisma.WalletScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  balance: 'balance',
  currency: 'currency',
  createdAt: 'createdAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  walletId: 'walletId',
  type: 'type',
  amount: 'amount',
  currency: 'currency',
  meta: 'meta',
  createdAt: 'createdAt'
};

exports.Prisma.CoinPurchaseScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  coins: 'coins',
  amount: 'amount',
  currency: 'currency',
  provider: 'provider',
  meta: 'meta',
  createdAt: 'createdAt'
};

exports.Prisma.ConversationScalarFieldEnum = {
  id: 'id',
  title: 'title',
  projectId: 'projectId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  fromUserId: 'fromUserId',
  toUserId: 'toUserId',
  body: 'body',
  attachments: 'attachments',
  isRead: 'isRead',
  createdAt: 'createdAt'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  aboutId: 'aboutId',
  byId: 'byId',
  rating: 'rating',
  comment: 'comment',
  contractId: 'contractId',
  createdAt: 'createdAt'
};

exports.Prisma.PortfolioScalarFieldEnum = {
  id: 'id',
  profileId: 'profileId',
  title: 'title',
  description: 'description',
  media: 'media',
  link: 'link',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  body: 'body',
  payload: 'payload',
  isRead: 'isRead',
  createdAt: 'createdAt'
};

exports.Prisma.AdminNoteScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  note: 'note',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
};

exports.Prisma.VerificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  faidaIdNumber: 'faidaIdNumber',
  documents: 'documents',
  status: 'status',
  reviewedBy: 'reviewedBy',
  reviewedAt: 'reviewedAt',
  notes: 'notes',
  createdAt: 'createdAt'
};

exports.Prisma.DisputeScalarFieldEnum = {
  id: 'id',
  contractId: 'contractId',
  raisedBy: 'raisedBy',
  reason: 'reason',
  status: 'status',
  resolution: 'resolution',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  PROVIDER: 'PROVIDER',
  SEEKER: 'SEEKER',
  ADMIN: 'ADMIN'
};

exports.Currency = exports.$Enums.Currency = {
  ETB: 'ETB',
  USD: 'USD'
};

exports.JobType = exports.$Enums.JobType = {
  FIXED: 'FIXED',
  HOURLY: 'HOURLY'
};

exports.JobStatus = exports.$Enums.JobStatus = {
  OPEN: 'OPEN',
  CLOSED: 'CLOSED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.ProposalStatus = exports.$Enums.ProposalStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED',
  WITHDRAWN: 'WITHDRAWN',
  COMPLETED: 'COMPLETED'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  HELD: 'HELD',
  RELEASED: 'RELEASED',
  REFUNDED: 'REFUNDED',
  FAILED: 'FAILED'
};

exports.VerificationStatus = exports.$Enums.VerificationStatus = {
  NONE: 'NONE',
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  MESSAGE: 'MESSAGE',
  PROPOSAL: 'PROPOSAL',
  PAYMENT: 'PAYMENT',
  VERIFICATION: 'VERIFICATION',
  SYSTEM: 'SYSTEM'
};

exports.Prisma.ModelName = {
  User: 'User',
  Session: 'Session',
  Account: 'Account',
  Profile: 'Profile',
  Skill: 'Skill',
  ProfileSkill: 'ProfileSkill',
  Category: 'Category',
  Listing: 'Listing',
  Job: 'Job',
  Proposal: 'Proposal',
  Contract: 'Contract',
  Milestone: 'Milestone',
  Wallet: 'Wallet',
  Transaction: 'Transaction',
  CoinPurchase: 'CoinPurchase',
  Conversation: 'Conversation',
  Message: 'Message',
  Review: 'Review',
  Portfolio: 'Portfolio',
  Notification: 'Notification',
  AdminNote: 'AdminNote',
  Verification: 'Verification',
  Dispute: 'Dispute'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/home/yordanos/Desktop/A/Alpha/packages/db/prisma/src/generated",
      "fromEnvVar": null
    },
    "config": {
      "runtime": "nodejs",
      "moduleFormat": "esm",
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "debian-openssl-3.0.x",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/home/yordanos/Desktop/A/Alpha/packages/db/prisma/schema/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null
  },
  "relativePath": "../../schema",
  "clientVersion": "6.17.0",
  "engineVersion": "c0aafc03b8ef6cdced8654b9a817999e02457d6a",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider     = \"prisma-client-js\" // Changed to prisma-client-js\n  output       = \"../src/generated\" // Changed output path to be relative to packages/db/src/\n  moduleFormat = \"esm\"\n  runtime      = \"nodejs\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nenum Role {\n  PROVIDER\n  SEEKER\n  ADMIN\n}\n\nenum Currency {\n  ETB\n  USD\n}\n\nenum JobType {\n  FIXED\n  HOURLY\n}\n\nenum JobStatus {\n  OPEN\n  CLOSED\n  IN_PROGRESS\n  COMPLETED\n  CANCELLED\n}\n\nenum ProposalStatus {\n  PENDING\n  ACCEPTED\n  REJECTED\n  WITHDRAWN\n  COMPLETED\n}\n\nenum PaymentStatus {\n  PENDING\n  HELD // escrow held\n  RELEASED\n  REFUNDED\n  FAILED\n}\n\nenum VerificationStatus {\n  NONE\n  PENDING\n  APPROVED\n  REJECTED\n}\n\nenum NotificationType {\n  MESSAGE\n  PROPOSAL\n  PAYMENT\n  VERIFICATION\n  SYSTEM\n}\n\nmodel User {\n  id             String        @id @default(cuid()) @map(\"_id\")\n  email          String?       @unique\n  phone          String?       @unique\n  passwordHash   String? // null if OAuth-only\n  role           Role          @default(PROVIDER)\n  displayName    String\n  username       String?       @unique\n  bio            String? // short about\n  avatarUrl      String?       @default(\"/placeholder-avatar.jpg\")\n  location       String? // \"Addis Ababa, Ethiopia\"\n  languages      String[]      @default([]) // e.g. [\"Amharic:Native\",\"English:Fluent\"]\n  isActive       Boolean       @default(true)\n  isVerified     Boolean       @default(false) // general user-level verified\n  verification   Verification? @relation(\"UserVerification\", fields: [verificationId], references: [id])\n  verificationId String?       @unique // One-to-one relation with Verification\n  profile        Profile?      @relation(\"UserProfile\")\n  profileId      String?       @unique // One-to-one relation with Profile\n  coins          Int           @default(0)\n  wallet         Wallet?       @relation(\"UserWallet\")\n  walletId       String?       @unique // One-to-one relation with Wallet\n  createdAt      DateTime      @default(now())\n  updatedAt      DateTime      @updatedAt\n\n  // Relations\n  listings            Listing[]      @relation(\"ProviderListings\")\n  jobsPosted          Job[]          @relation(\"JobsPosted\")\n  proposals           Proposal[]     @relation(\"ProviderProposals\") // Added opposite relation\n  reviewsReceived     Review[]       @relation(\"ReviewsAboutUser\")\n  reviewsGiven        Review[]       @relation(\"ReviewsGivenByUser\")\n  messagesSent        Message[]      @relation(\"MessagesFrom\")\n  messagesRecvd       Message[]      @relation(\"MessagesTo\")\n  conversations       Conversation[] @relation(\"ConversationParticipants\")\n  contractsAsClient   Contract[]     @relation(\"ClientContracts\") // Added opposite relation\n  contractsAsProvider Contract[]     @relation(\"ProviderContracts\") // Added opposite relation\n  coinPurchases       CoinPurchase[]\n  notifications       Notification[]\n  adminNotes          AdminNote[]\n\n  // Auth-related models (from previous auth.prisma)\n  sessions Session[]\n  accounts Account[]\n\n  @@index([role])\n  @@index([createdAt])\n  @@map(\"users\")\n}\n\nmodel Session {\n  id        String   @id @default(cuid()) @map(\"_id\")\n  expiresAt DateTime\n  token     String\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  ipAddress String?\n  userAgent String?\n  userId    String\n  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([token])\n  @@map(\"sessions\")\n}\n\nmodel Account {\n  id                    String    @id @default(cuid()) @map(\"_id\")\n  accountId             String\n  providerId            String\n  userId                String\n  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  accessToken           String?\n  refreshToken          String?\n  idToken               String?\n  accessTokenExpiresAt  DateTime?\n  refreshTokenExpiresAt DateTime?\n  scope                 String?\n  password              String?\n  createdAt             DateTime  @default(now())\n  updatedAt             DateTime  @updatedAt\n\n  @@map(\"accounts\")\n}\n\nmodel Profile {\n  id            String         @id @default(cuid()) @map(\"_id\")\n  user          User           @relation(\"UserProfile\", fields: [userId], references: [id])\n  userId        String         @unique\n  headline      String?\n  hourlyRate    Float?\n  currency      Currency?      @default(ETB)\n  availability  String? // e.g., \"Full-time\", \"Part-time\", \"Not available\"\n  skills        ProfileSkill[] // Changed to ProfileSkill for many-to-many\n  experience    Json? // structured experience data\n  education     Json? // structured education data\n  portfolio     Portfolio[]\n  completedJobs Int            @default(0)\n  successRate   Float? // 0..100\n  createdAt     DateTime       @default(now())\n  updatedAt     DateTime       @updatedAt\n\n  @@map(\"profiles\")\n}\n\n/**\n * Skills and Category join tables\n */\n\nmodel Skill {\n  id        String         @id @default(cuid()) @map(\"_id\")\n  name      String         @unique\n  slug      String         @unique\n  // many-to-many with Profile via ProfileSkill\n  profiles  ProfileSkill[]\n  listings  Listing[]\n  jobs      Job[]\n  createdAt DateTime       @default(now())\n\n  @@map(\"skills\")\n}\n\nmodel ProfileSkill {\n  id        String   @id @default(cuid()) @map(\"_id\")\n  profile   Profile  @relation(fields: [profileId], references: [id])\n  profileId String\n  skill     Skill    @relation(fields: [skillId], references: [id])\n  skillId   String\n  level     Int      @default(3) // 1..5\n  createdAt DateTime @default(now())\n\n  @@unique([profileId, skillId])\n  @@map(\"profile_skills\")\n}\n\nmodel Category {\n  id        String    @id @default(cuid()) @map(\"_id\")\n  name      String    @unique\n  slug      String    @unique\n  listings  Listing[]\n  createdAt DateTime  @default(now())\n\n  @@map(\"categories\")\n}\n\n/**\n * Marketplace / Listings and Jobs\n */\n\nmodel Listing {\n  id           String    @id @default(cuid()) @map(\"_id\")\n  provider     User      @relation(\"ProviderListings\", fields: [providerId], references: [id])\n  providerId   String\n  title        String\n  slug         String    @unique\n  description  String // long description\n  price        Float\n  currency     Currency  @default(ETB)\n  deliveryDays Int? // for services\n  category     Category? @relation(fields: [categoryId], references: [id])\n  categoryId   String?\n  images       String[]  @default([])\n  tags         String[]  @default([])\n  isPublished  Boolean   @default(false)\n  rating       Float?    @default(0)\n  reviewCount  Int       @default(0)\n  createdAt    DateTime  @default(now())\n  updatedAt    DateTime  @updatedAt\n  // relations\n  skills       Skill[]\n\n  @@index([providerId])\n  @@map(\"listings\")\n}\n\nmodel Job {\n  id             String     @id @default(cuid()) @map(\"_id\")\n  seeker         User       @relation(\"JobsPosted\", fields: [seekerId], references: [id])\n  seekerId       String\n  title          String\n  slug           String     @unique\n  description    String\n  type           JobType    @default(FIXED)\n  budgetMin      Float?\n  budgetMax      Float?\n  currency       Currency   @default(ETB)\n  deadline       DateTime?\n  status         JobStatus  @default(OPEN)\n  attachments    String[]   @default([])\n  requiredSkills Skill[]\n  location       String?\n  createdAt      DateTime   @default(now())\n  updatedAt      DateTime   @updatedAt\n  proposals      Proposal[] @relation(\"JobProposals\") // Added opposite relation\n  contract       Contract?  @relation(\"JobContract\") // Added opposite relation\n\n  @@index([seekerId])\n  @@map(\"jobs\")\n}\n\nmodel Proposal {\n  id            String         @id @default(cuid()) @map(\"_id\")\n  job           Job            @relation(\"JobProposals\", fields: [jobId], references: [id])\n  jobId         String\n  provider      User           @relation(\"ProviderProposals\", fields: [providerId], references: [id])\n  providerId    String\n  coverLetter   String?\n  price         Float?\n  currency      Currency       @default(ETB)\n  estimatedDays Int?\n  status        ProposalStatus @default(PENDING)\n  attachments   String[]       @default([])\n  createdAt     DateTime       @default(now())\n  updatedAt     DateTime       @updatedAt\n\n  @@index([jobId])\n  @@index([providerId])\n  @@map(\"proposals\")\n}\n\n/**\n * Contracts, milestones, escrow & payments\n */\n\nmodel Contract {\n  id          String        @id @default(cuid()) @map(\"_id\")\n  job         Job           @relation(\"JobContract\", fields: [jobId], references: [id])\n  jobId       String        @unique // One-to-one relation\n  client      User          @relation(\"ClientContracts\", fields: [clientId], references: [id])\n  clientId    String\n  provider    User          @relation(\"ProviderContracts\", fields: [providerId], references: [id])\n  providerId  String\n  totalAmount Float\n  currency    Currency      @default(ETB)\n  status      PaymentStatus @default(PENDING)\n  escrowId    String? // reference to escrow/payment record\n  startDate   DateTime?\n  endDate     DateTime?\n  milestones  Milestone[]\n  dispute     Dispute?      @relation(\"ContractDisputes\") // Added opposite relation\n  createdAt   DateTime      @default(now())\n  updatedAt   DateTime      @updatedAt\n\n  @@index([jobId])\n  @@map(\"contracts\")\n}\n\nmodel Milestone {\n  id          String    @id @default(cuid()) @map(\"_id\")\n  contract    Contract  @relation(fields: [contractId], references: [id])\n  contractId  String\n  title       String\n  description String?\n  amount      Float\n  dueDate     DateTime?\n  isPaid      Boolean   @default(false)\n  createdAt   DateTime  @default(now())\n\n  @@map(\"milestones\")\n}\n\n/**\n * Wallet & transactions\n */\n\nmodel Wallet {\n  id           String        @id @default(cuid()) @map(\"_id\")\n  user         User          @relation(\"UserWallet\", fields: [userId], references: [id])\n  userId       String        @unique\n  balance      Float         @default(0)\n  currency     Currency      @default(ETB)\n  transactions Transaction[]\n  createdAt    DateTime      @default(now())\n\n  @@map(\"wallets\")\n}\n\nmodel Transaction {\n  id        String   @id @default(cuid()) @map(\"_id\")\n  wallet    Wallet   @relation(fields: [walletId], references: [id])\n  walletId  String\n  type      String // e.g., COIN_PURCHASE, ESCROW_HOLD, ESCROW_RELEASE, WITHDRAWAL, FEE\n  amount    Float\n  currency  Currency @default(ETB)\n  meta      Json? // store extra info (order id, external tx id)\n  createdAt DateTime @default(now())\n\n  @@index([walletId])\n  @@map(\"transactions\")\n}\n\nmodel CoinPurchase {\n  id        String   @id @default(cuid()) @map(\"_id\")\n  user      User     @relation(fields: [userId], references: [id])\n  userId    String\n  coins     Int\n  amount    Float\n  currency  Currency @default(ETB)\n  provider  String? // e.g., \"telebirr\", \"chapa\"\n  meta      Json?\n  createdAt DateTime @default(now())\n\n  @@map(\"coin_purchases\")\n}\n\n/**\n * Messaging (conversations & messages)\n */\n\nmodel Conversation {\n  id           String    @id @default(cuid()) @map(\"_id\")\n  title        String?\n  participants User[]    @relation(\"ConversationParticipants\")\n  messages     Message[]\n  projectId    String? // optional link to Job or Contract\n  createdAt    DateTime  @default(now())\n  updatedAt    DateTime  @updatedAt\n\n  @@map(\"conversations\")\n}\n\nmodel Message {\n  id             String       @id @default(cuid()) @map(\"_id\")\n  conversation   Conversation @relation(fields: [conversationId], references: [id])\n  conversationId String\n  fromUser       User         @relation(\"MessagesFrom\", fields: [fromUserId], references: [id])\n  fromUserId     String\n  toUser         User         @relation(\"MessagesTo\", fields: [toUserId], references: [id])\n  toUserId       String\n  body           String\n  attachments    String[]     @default([])\n  isRead         Boolean      @default(false)\n  createdAt      DateTime     @default(now())\n\n  @@index([conversationId])\n  @@index([fromUserId, toUserId])\n  @@map(\"messages\")\n}\n\n/**\n * Reviews & Ratings\n */\n\nmodel Review {\n  id         String   @id @default(cuid()) @map(\"_id\")\n  about      User     @relation(\"ReviewsAboutUser\", fields: [aboutId], references: [id])\n  aboutId    String\n  by         User     @relation(\"ReviewsGivenByUser\", fields: [byId], references: [id])\n  byId       String\n  rating     Int // 1..5\n  comment    String?\n  contractId String? // optional link to contract\n  createdAt  DateTime @default(now())\n\n  @@index([aboutId])\n  @@map(\"reviews\")\n}\n\n/**\n * Portfolio / Files\n */\n\nmodel Portfolio {\n  id          String   @id @default(cuid()) @map(\"_id\")\n  profile     Profile  @relation(fields: [profileId], references: [id])\n  profileId   String\n  title       String\n  description String?\n  media       String[] // URLs\n  link        String? // external link (demo / repo)\n  createdAt   DateTime @default(now())\n\n  @@map(\"portfolio\")\n}\n\n/**\n * Notifications & Admin\n */\n\nmodel Notification {\n  id        String           @id @default(cuid()) @map(\"_id\")\n  user      User             @relation(fields: [userId], references: [id])\n  userId    String\n  type      NotificationType\n  title     String\n  body      String?\n  payload   Json?\n  isRead    Boolean          @default(false)\n  createdAt DateTime         @default(now())\n\n  @@index([userId])\n  @@map(\"notifications\")\n}\n\nmodel AdminNote {\n  id        String   @id @default(cuid()) @map(\"_id\")\n  user      User     @relation(fields: [userId], references: [id])\n  userId    String\n  note      String\n  createdBy String? // admin id or name\n  createdAt DateTime @default(now())\n\n  @@map(\"admin_notes\")\n}\n\n/**\n * Verification & disputes\n */\n\nmodel Verification {\n  id            String             @id @default(cuid()) @map(\"_id\")\n  user          User?              @relation(\"UserVerification\")\n  userId        String?            @unique\n  faidaIdNumber String?\n  documents     String[]           @default([]) // urls to uploaded docs\n  status        VerificationStatus @default(NONE)\n  reviewedBy    String?\n  reviewedAt    DateTime?\n  notes         String?\n  createdAt     DateTime           @default(now())\n\n  @@map(\"verifications\")\n}\n\nmodel Dispute {\n  id         String    @id @default(cuid()) @map(\"_id\")\n  contract   Contract? @relation(\"ContractDisputes\", fields: [contractId], references: [id])\n  contractId String?   @unique\n  raisedBy   String // userId\n  reason     String\n  status     String    @default(\"OPEN\")\n  resolution String?\n  createdAt  DateTime  @default(now())\n\n  @@map(\"disputes\")\n}\n",
  "inlineSchemaHash": "4affbedd00bb35561eab9c06658d9004bcd01ef9bb73ea8a83a342191b7faa5e",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"passwordHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"Role\"},{\"name\":\"displayName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bio\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"avatarUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"location\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"languages\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isVerified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"verification\",\"kind\":\"object\",\"type\":\"Verification\",\"relationName\":\"UserVerification\"},{\"name\":\"verificationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"profile\",\"kind\":\"object\",\"type\":\"Profile\",\"relationName\":\"UserProfile\"},{\"name\":\"profileId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"coins\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"wallet\",\"kind\":\"object\",\"type\":\"Wallet\",\"relationName\":\"UserWallet\"},{\"name\":\"walletId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"listings\",\"kind\":\"object\",\"type\":\"Listing\",\"relationName\":\"ProviderListings\"},{\"name\":\"jobsPosted\",\"kind\":\"object\",\"type\":\"Job\",\"relationName\":\"JobsPosted\"},{\"name\":\"proposals\",\"kind\":\"object\",\"type\":\"Proposal\",\"relationName\":\"ProviderProposals\"},{\"name\":\"reviewsReceived\",\"kind\":\"object\",\"type\":\"Review\",\"relationName\":\"ReviewsAboutUser\"},{\"name\":\"reviewsGiven\",\"kind\":\"object\",\"type\":\"Review\",\"relationName\":\"ReviewsGivenByUser\"},{\"name\":\"messagesSent\",\"kind\":\"object\",\"type\":\"Message\",\"relationName\":\"MessagesFrom\"},{\"name\":\"messagesRecvd\",\"kind\":\"object\",\"type\":\"Message\",\"relationName\":\"MessagesTo\"},{\"name\":\"conversations\",\"kind\":\"object\",\"type\":\"Conversation\",\"relationName\":\"ConversationParticipants\"},{\"name\":\"contractsAsClient\",\"kind\":\"object\",\"type\":\"Contract\",\"relationName\":\"ClientContracts\"},{\"name\":\"contractsAsProvider\",\"kind\":\"object\",\"type\":\"Contract\",\"relationName\":\"ProviderContracts\"},{\"name\":\"coinPurchases\",\"kind\":\"object\",\"type\":\"CoinPurchase\",\"relationName\":\"CoinPurchaseToUser\"},{\"name\":\"notifications\",\"kind\":\"object\",\"type\":\"Notification\",\"relationName\":\"NotificationToUser\"},{\"name\":\"adminNotes\",\"kind\":\"object\",\"type\":\"AdminNote\",\"relationName\":\"AdminNoteToUser\"},{\"name\":\"sessions\",\"kind\":\"object\",\"type\":\"Session\",\"relationName\":\"SessionToUser\"},{\"name\":\"accounts\",\"kind\":\"object\",\"type\":\"Account\",\"relationName\":\"AccountToUser\"}],\"dbName\":\"users\"},\"Session\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"ipAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userAgent\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SessionToUser\"}],\"dbName\":\"sessions\"},\"Account\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"accountId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"providerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AccountToUser\"},{\"name\":\"accessToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"refreshToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"idToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"accessTokenExpiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"refreshTokenExpiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"scope\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"accounts\"},\"Profile\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserProfile\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"headline\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"hourlyRate\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"currency\",\"kind\":\"enum\",\"type\":\"Currency\"},{\"name\":\"availability\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"skills\",\"kind\":\"object\",\"type\":\"ProfileSkill\",\"relationName\":\"ProfileToProfileSkill\"},{\"name\":\"experience\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"education\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"portfolio\",\"kind\":\"object\",\"type\":\"Portfolio\",\"relationName\":\"PortfolioToProfile\"},{\"name\":\"completedJobs\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"successRate\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"profiles\"},\"Skill\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"profiles\",\"kind\":\"object\",\"type\":\"ProfileSkill\",\"relationName\":\"ProfileSkillToSkill\"},{\"name\":\"listings\",\"kind\":\"object\",\"type\":\"Listing\",\"relationName\":\"ListingToSkill\"},{\"name\":\"jobs\",\"kind\":\"object\",\"type\":\"Job\",\"relationName\":\"JobToSkill\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"skills\"},\"ProfileSkill\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"profile\",\"kind\":\"object\",\"type\":\"Profile\",\"relationName\":\"ProfileToProfileSkill\"},{\"name\":\"profileId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"skill\",\"kind\":\"object\",\"type\":\"Skill\",\"relationName\":\"ProfileSkillToSkill\"},{\"name\":\"skillId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"level\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"profile_skills\"},\"Category\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"listings\",\"kind\":\"object\",\"type\":\"Listing\",\"relationName\":\"CategoryToListing\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"categories\"},\"Listing\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"provider\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ProviderListings\"},{\"name\":\"providerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"currency\",\"kind\":\"enum\",\"type\":\"Currency\"},{\"name\":\"deliveryDays\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"category\",\"kind\":\"object\",\"type\":\"Category\",\"relationName\":\"CategoryToListing\"},{\"name\":\"categoryId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"images\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tags\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isPublished\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"rating\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"reviewCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"skills\",\"kind\":\"object\",\"type\":\"Skill\",\"relationName\":\"ListingToSkill\"}],\"dbName\":\"listings\"},\"Job\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"seeker\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"JobsPosted\"},{\"name\":\"seekerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"JobType\"},{\"name\":\"budgetMin\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"budgetMax\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"currency\",\"kind\":\"enum\",\"type\":\"Currency\"},{\"name\":\"deadline\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"JobStatus\"},{\"name\":\"attachments\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"requiredSkills\",\"kind\":\"object\",\"type\":\"Skill\",\"relationName\":\"JobToSkill\"},{\"name\":\"location\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"proposals\",\"kind\":\"object\",\"type\":\"Proposal\",\"relationName\":\"JobProposals\"},{\"name\":\"contract\",\"kind\":\"object\",\"type\":\"Contract\",\"relationName\":\"JobContract\"}],\"dbName\":\"jobs\"},\"Proposal\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"job\",\"kind\":\"object\",\"type\":\"Job\",\"relationName\":\"JobProposals\"},{\"name\":\"jobId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"provider\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ProviderProposals\"},{\"name\":\"providerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"coverLetter\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"currency\",\"kind\":\"enum\",\"type\":\"Currency\"},{\"name\":\"estimatedDays\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"ProposalStatus\"},{\"name\":\"attachments\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"proposals\"},\"Contract\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"job\",\"kind\":\"object\",\"type\":\"Job\",\"relationName\":\"JobContract\"},{\"name\":\"jobId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"client\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ClientContracts\"},{\"name\":\"clientId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"provider\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ProviderContracts\"},{\"name\":\"providerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"totalAmount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"currency\",\"kind\":\"enum\",\"type\":\"Currency\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"PaymentStatus\"},{\"name\":\"escrowId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"milestones\",\"kind\":\"object\",\"type\":\"Milestone\",\"relationName\":\"ContractToMilestone\"},{\"name\":\"dispute\",\"kind\":\"object\",\"type\":\"Dispute\",\"relationName\":\"ContractDisputes\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"contracts\"},\"Milestone\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"contract\",\"kind\":\"object\",\"type\":\"Contract\",\"relationName\":\"ContractToMilestone\"},{\"name\":\"contractId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"dueDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isPaid\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"milestones\"},\"Wallet\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserWallet\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"balance\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"currency\",\"kind\":\"enum\",\"type\":\"Currency\"},{\"name\":\"transactions\",\"kind\":\"object\",\"type\":\"Transaction\",\"relationName\":\"TransactionToWallet\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"wallets\"},\"Transaction\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"wallet\",\"kind\":\"object\",\"type\":\"Wallet\",\"relationName\":\"TransactionToWallet\"},{\"name\":\"walletId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"currency\",\"kind\":\"enum\",\"type\":\"Currency\"},{\"name\":\"meta\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"transactions\"},\"CoinPurchase\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CoinPurchaseToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"coins\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"currency\",\"kind\":\"enum\",\"type\":\"Currency\"},{\"name\":\"provider\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"meta\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"coin_purchases\"},\"Conversation\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"participants\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ConversationParticipants\"},{\"name\":\"messages\",\"kind\":\"object\",\"type\":\"Message\",\"relationName\":\"ConversationToMessage\"},{\"name\":\"projectId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"conversations\"},\"Message\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"conversation\",\"kind\":\"object\",\"type\":\"Conversation\",\"relationName\":\"ConversationToMessage\"},{\"name\":\"conversationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fromUser\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"MessagesFrom\"},{\"name\":\"fromUserId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"toUser\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"MessagesTo\"},{\"name\":\"toUserId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"body\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"attachments\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isRead\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"messages\"},\"Review\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"about\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ReviewsAboutUser\"},{\"name\":\"aboutId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"by\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ReviewsGivenByUser\"},{\"name\":\"byId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rating\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"comment\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"contractId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"reviews\"},\"Portfolio\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"profile\",\"kind\":\"object\",\"type\":\"Profile\",\"relationName\":\"PortfolioToProfile\"},{\"name\":\"profileId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"media\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"link\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"portfolio\"},\"Notification\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"NotificationToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"NotificationType\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"body\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"payload\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"isRead\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"notifications\"},\"AdminNote\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AdminNoteToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"note\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"admin_notes\"},\"Verification\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserVerification\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"faidaIdNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"documents\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"VerificationStatus\"},{\"name\":\"reviewedBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"reviewedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"notes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"verifications\"},\"Dispute\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"contract\",\"kind\":\"object\",\"type\":\"Contract\",\"relationName\":\"ContractDisputes\"},{\"name\":\"contractId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"raisedBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"reason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"resolution\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"disputes\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

